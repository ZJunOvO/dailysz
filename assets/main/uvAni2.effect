CCEffect %{
  techniques: 
    - 
      passes: 
        - 
          blendState: 
            targets: 
              - 
                blend: true
          rasterizerState: 
            cullMode: 0
          properties: 
            texture: 
              value: "white"
            kuangColorStrength: 
              value: 
                - 3
          vert: "vs"
          frag: "fs"

    }%
    
    CCProgram vs %{
        
precision highp float;
#include <cc-global>

in vec3 a_position;
in mediump vec2 a_uv0;
out mediump vec2 v_uv0;
in vec4 a_color;
out vec4 v_color;
void main () {
  gl_Position = cc_matViewProj * vec4(a_position, 1);
  v_uv0 = a_uv0;
  v_color = a_color;
}
    }%
    
    CCProgram fs %{
        
precision highp float;
uniform CCGlobal {
  mat4 cc_matView;
  mat4 cc_matViewInv;
  mat4 cc_matProj;
  mat4 cc_matProjInv;
  mat4 cc_matViewProj;
  mat4 cc_matViewProjInv;
  vec4 cc_cameraPos;
  vec4 cc_time;
  mediump vec4 cc_screenSize;
  mediump vec4 cc_screenScale;
};
#if USE_ALPHA_TEST
  uniform ALPHA_TEST {
    float alphaThreshold;
  };
#endif
void ALPHA_TEST (in vec4 color) {
  #if USE_ALPHA_TEST
      if (color.a < alphaThreshold) discard;
  #endif
}
void ALPHA_TEST (in float alpha) {
  #if USE_ALPHA_TEST
      if (alpha < alphaThreshold) discard;
  #endif
}
uniform sampler2D texture;
in mediump vec2 v_uv0;
in vec4 v_color;
uniform ARGS{
  float kuangColorStrength;
};
void main () {
  vec4 color = vec4(1.0, 1.0, 1.0, 1.0);
  vec4 texture_tmp = texture(texture, v_uv0);
  #if CC_USE_ALPHA_ATLAS_texture
      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;
  #endif
  #if INPUT_IS_GAMMA
    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);
    color.a *= texture_tmp.a;
  #else
    color *= texture_tmp;
  #endif
  vec2 dir = normalize(vec2(1.0, 1.0) - vec2(0.5, 0.5));
  float angle = fract(cc_time.x * 0.25) * 6.28;
  dir = vec2(dir.x * cos(angle) - dir.y * sin(angle), dir.x * sin(angle) + dir.y * cos(angle));
  vec2 uvFromCenter = v_uv0 - vec2(0.5, 0.5);
  float dirColor = abs(dot(uvFromCenter, dir));
  dirColor *= color.a;
  dirColor = pow(dirColor, 2.0);
  vec4 finalkuangColor = v_color * dirColor;
  color += color * finalkuangColor * kuangColorStrength;
  ALPHA_TEST(color);
  gl_FragColor = color;
}
    }%
    