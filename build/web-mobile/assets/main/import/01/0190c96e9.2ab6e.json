[
  1,
  [
    "1eSzBZQcJFKJezLwO3t4LZ"
  ],
  [
    "_effectAsset"
  ],
  [
    [
      "cc.EffectAsset",
      [
        "_name",
        "shaders",
        "techniques"
      ],
      0
    ],
    [
      "cc.Material",
      [
        "_name",
        "_techniqueData"
      ],
      1
    ]
  ],
  [
    [
      0,
      0,
      1,
      2,
      4
    ],
    [
      1,
      0,
      1,
      3
    ]
  ],
  [
    [
      [
        [
          0,
          "uvAni2",
          [
            {
              "hash": 3465733735,
              "record": null,
              "name": "uvAni2|vs|fs",
              "glsl3": {
                "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
                "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform sampler2D texture;\nin mediump vec2 v_uv0;\nin vec4 v_color;\nuniform ARGS{\n  float kuangColorStrength;\n};\nvoid main () {\n  vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec2 dir = normalize(vec2(1.0, 1.0) - vec2(0.5, 0.5));\n  float angle = fract(cc_time.x * 0.25) * 6.28;\n  dir = vec2(dir.x * cos(angle) - dir.y * sin(angle), dir.x * sin(angle) + dir.y * cos(angle));\n  vec2 uvFromCenter = v_uv0 - vec2(0.5, 0.5);\n  float dirColor = abs(dot(uvFromCenter, dir));\n  dirColor *= color.a;\n  dirColor = pow(dirColor, 2.0);\n  vec4 finalkuangColor = v_color * dirColor;\n  color += color * finalkuangColor * kuangColorStrength;\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n}"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
                "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform sampler2D texture;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nuniform float kuangColorStrength;\nvoid main () {\n  vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  vec2 dir = normalize(vec2(1.0, 1.0) - vec2(0.5, 0.5));\n  float angle = fract(cc_time.x * 0.25) * 6.28;\n  dir = vec2(dir.x * cos(angle) - dir.y * sin(angle), dir.x * sin(angle) + dir.y * cos(angle));\n  vec2 uvFromCenter = v_uv0 - vec2(0.5, 0.5);\n  float dirColor = abs(dot(uvFromCenter, dir));\n  dirColor *= color.a;\n  dirColor = pow(dirColor, 2.0);\n  vec4 finalkuangColor = v_color * dirColor;\n  color += color * finalkuangColor * kuangColorStrength;\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n}"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_ALPHA_ATLAS_texture",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "INPUT_IS_GAMMA",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "ALPHA_TEST",
                  "binding": 0,
                  "members": [
                    {
                      "name": "alphaThreshold",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": [
                    "USE_ALPHA_TEST"
                  ]
                },
                {
                  "name": "ARGS",
                  "binding": 1,
                  "members": [
                    {
                      "name": "kuangColorStrength",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "texture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": []
                }
              ]
            }
          ],
          [
            {
              "passes": [
                {
                  "program": "uvAni2|vs|fs",
                  "blendState": {
                    "targets": [
                      {
                        "blend": true
                      }
                    ]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "properties": {
                    "texture": {
                      "value": "white",
                      "type": 29
                    },
                    "kuangColorStrength": {
                      "type": 13,
                      "value": [
                        3
                      ]
                    }
                  }
                }
              ]
            }
          ]
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          1,
          "uvAni2",
          {
            "0": {
              "defines": {},
              "props": {
                "kuangColorStrength": 4
              }
            }
          }
        ]
      ],
      0,
      0,
      [
        0
      ],
      [
        0
      ],
      [
        0
      ]
    ]
  ]
]