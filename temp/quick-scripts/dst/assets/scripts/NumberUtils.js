
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/NumberUtils.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '26435KE1/pIvr8//0gRYvdJ', 'NumberUtils');
// scripts/NumberUtils.js

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var n = function () {
  function t() {}

  t.parseNum = function (t, e) {
    void 0 === e && (e = 0);
    "string" == typeof t ? t = parseInt(t) : isNaN(t) && (t = 0);
    return 0 === t ? e : t;
  };

  t.FormatCurrency = function (t) {
    "string" == typeof t && (t = parseInt(t));
    return t >= this.TENBILLION ? parseInt(t / this.TENBILLION + "") + "B" : t >= this.MILLION ? parseInt(t / this.MILLION + "") + "M" : t >= this.KILO ? parseInt(t / this.KILO + "") + "K" : t.toString();
  };

  t.RandomInt = function (t, e) {
    return Math.ceil(Math.random() * (e - t + 1) + t - 1);
  };

  t.stringToNumArr = function (t) {
    var e = [];
    if (!t) return e;

    for (var o = t.split(";"), n = 0, i = o.length; n < i; n++) {
      e.push(this.parseNum(o[n]));
    }

    return e;
  };

  t.clamp = function (t, e, o) {
    e > o && (e = [o, o = e][0]);
    t > o && (t = o);
    (t < e || Number.isNaN(t)) && (t = e);
    return t;
  };

  t.KILO = 1e3;
  t.MILLION = 1e6;
  t.TENBILLION = 1e9;
  t.BILLION = 1e8;
  t.TENKILO = 1e4;
  return t;
}();

exports["default"] = n;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTnVtYmVyVXRpbHMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJuIiwidCIsInBhcnNlTnVtIiwiZSIsInBhcnNlSW50IiwiaXNOYU4iLCJGb3JtYXRDdXJyZW5jeSIsIlRFTkJJTExJT04iLCJNSUxMSU9OIiwiS0lMTyIsInRvU3RyaW5nIiwiUmFuZG9tSW50IiwiTWF0aCIsImNlaWwiLCJyYW5kb20iLCJzdHJpbmdUb051bUFyciIsIm8iLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2xhbXAiLCJOdW1iZXIiLCJCSUxMSU9OIiwiVEVOS0lMTyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztFQUFDQyxLQUFLLEVBQUUsQ0FBQztBQUFULENBQTdDOztBQUNBLElBQUlDLENBQUMsR0FBSSxZQUFZO0VBQ2pCLFNBQVNDLENBQVQsR0FBYSxDQUFFOztFQUNmQSxDQUFDLENBQUNDLFFBQUYsR0FBYSxVQUFVRCxDQUFWLEVBQWFFLENBQWIsRUFBZ0I7SUFDekIsS0FBSyxDQUFMLEtBQVdBLENBQVgsS0FBaUJBLENBQUMsR0FBRyxDQUFyQjtJQUNBLFlBQVksT0FBT0YsQ0FBbkIsR0FBd0JBLENBQUMsR0FBR0csUUFBUSxDQUFDSCxDQUFELENBQXBDLEdBQTJDSSxLQUFLLENBQUNKLENBQUQsQ0FBTCxLQUFhQSxDQUFDLEdBQUcsQ0FBakIsQ0FBM0M7SUFDQSxPQUFPLE1BQU1BLENBQU4sR0FBVUUsQ0FBVixHQUFjRixDQUFyQjtFQUNILENBSkQ7O0VBS0FBLENBQUMsQ0FBQ0ssY0FBRixHQUFtQixVQUFVTCxDQUFWLEVBQWE7SUFDNUIsWUFBWSxPQUFPQSxDQUFuQixLQUF5QkEsQ0FBQyxHQUFHRyxRQUFRLENBQUNILENBQUQsQ0FBckM7SUFDQSxPQUFPQSxDQUFDLElBQUksS0FBS00sVUFBVixHQUNESCxRQUFRLENBQUNILENBQUMsR0FBRyxLQUFLTSxVQUFULEdBQXNCLEVBQXZCLENBQVIsR0FBcUMsR0FEcEMsR0FFRE4sQ0FBQyxJQUFJLEtBQUtPLE9BQVYsR0FDQUosUUFBUSxDQUFDSCxDQUFDLEdBQUcsS0FBS08sT0FBVCxHQUFtQixFQUFwQixDQUFSLEdBQWtDLEdBRGxDLEdBRUFQLENBQUMsSUFBSSxLQUFLUSxJQUFWLEdBQ0FMLFFBQVEsQ0FBQ0gsQ0FBQyxHQUFHLEtBQUtRLElBQVQsR0FBZ0IsRUFBakIsQ0FBUixHQUErQixHQUQvQixHQUVBUixDQUFDLENBQUNTLFFBQUYsRUFOTjtFQU9ILENBVEQ7O0VBVUFULENBQUMsQ0FBQ1UsU0FBRixHQUFjLFVBQVVWLENBQVYsRUFBYUUsQ0FBYixFQUFnQjtJQUMxQixPQUFPUyxJQUFJLENBQUNDLElBQUwsQ0FBVUQsSUFBSSxDQUFDRSxNQUFMLE1BQWlCWCxDQUFDLEdBQUdGLENBQUosR0FBUSxDQUF6QixJQUE4QkEsQ0FBOUIsR0FBa0MsQ0FBNUMsQ0FBUDtFQUNILENBRkQ7O0VBR0FBLENBQUMsQ0FBQ2MsY0FBRixHQUFtQixVQUFVZCxDQUFWLEVBQWE7SUFDNUIsSUFBSUUsQ0FBQyxHQUFHLEVBQVI7SUFDQSxJQUFJLENBQUNGLENBQUwsRUFBUSxPQUFPRSxDQUFQOztJQUNSLEtBQUssSUFBSWEsQ0FBQyxHQUFHZixDQUFDLENBQUNnQixLQUFGLENBQVEsR0FBUixDQUFSLEVBQXNCakIsQ0FBQyxHQUFHLENBQTFCLEVBQTZCa0IsQ0FBQyxHQUFHRixDQUFDLENBQUNHLE1BQXhDLEVBQWdEbkIsQ0FBQyxHQUFHa0IsQ0FBcEQsRUFBdURsQixDQUFDLEVBQXhEO01BQTRERyxDQUFDLENBQUNpQixJQUFGLENBQU8sS0FBS2xCLFFBQUwsQ0FBY2MsQ0FBQyxDQUFDaEIsQ0FBRCxDQUFmLENBQVA7SUFBNUQ7O0lBQ0EsT0FBT0csQ0FBUDtFQUNILENBTEQ7O0VBTUFGLENBQUMsQ0FBQ29CLEtBQUYsR0FBVSxVQUFVcEIsQ0FBVixFQUFhRSxDQUFiLEVBQWdCYSxDQUFoQixFQUFtQjtJQUN6QmIsQ0FBQyxHQUFHYSxDQUFKLEtBQVViLENBQUMsR0FBRyxDQUFDYSxDQUFELEVBQUtBLENBQUMsR0FBR2IsQ0FBVCxFQUFhLENBQWIsQ0FBZDtJQUNBRixDQUFDLEdBQUdlLENBQUosS0FBVWYsQ0FBQyxHQUFHZSxDQUFkO0lBQ0EsQ0FBQ2YsQ0FBQyxHQUFHRSxDQUFKLElBQVNtQixNQUFNLENBQUNqQixLQUFQLENBQWFKLENBQWIsQ0FBVixNQUErQkEsQ0FBQyxHQUFHRSxDQUFuQztJQUNBLE9BQU9GLENBQVA7RUFDSCxDQUxEOztFQU1BQSxDQUFDLENBQUNRLElBQUYsR0FBUyxHQUFUO0VBQ0FSLENBQUMsQ0FBQ08sT0FBRixHQUFZLEdBQVo7RUFDQVAsQ0FBQyxDQUFDTSxVQUFGLEdBQWUsR0FBZjtFQUNBTixDQUFDLENBQUNzQixPQUFGLEdBQVksR0FBWjtFQUNBdEIsQ0FBQyxDQUFDdUIsT0FBRixHQUFZLEdBQVo7RUFDQSxPQUFPdkIsQ0FBUDtBQUNILENBdENPLEVBQVI7O0FBdUNBSCxPQUFPLFdBQVAsR0FBa0JFLENBQWxCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogITB9KTtcbnZhciBuID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICB0LnBhcnNlTnVtID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gMCk7XG4gICAgICAgIFwic3RyaW5nXCIgPT0gdHlwZW9mIHQgPyAodCA9IHBhcnNlSW50KHQpKSA6IGlzTmFOKHQpICYmICh0ID0gMCk7XG4gICAgICAgIHJldHVybiAwID09PSB0ID8gZSA6IHQ7XG4gICAgfTtcbiAgICB0LkZvcm1hdEN1cnJlbmN5ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgdCAmJiAodCA9IHBhcnNlSW50KHQpKTtcbiAgICAgICAgcmV0dXJuIHQgPj0gdGhpcy5URU5CSUxMSU9OXG4gICAgICAgICAgICA/IHBhcnNlSW50KHQgLyB0aGlzLlRFTkJJTExJT04gKyBcIlwiKSArIFwiQlwiXG4gICAgICAgICAgICA6IHQgPj0gdGhpcy5NSUxMSU9OXG4gICAgICAgICAgICA/IHBhcnNlSW50KHQgLyB0aGlzLk1JTExJT04gKyBcIlwiKSArIFwiTVwiXG4gICAgICAgICAgICA6IHQgPj0gdGhpcy5LSUxPXG4gICAgICAgICAgICA/IHBhcnNlSW50KHQgLyB0aGlzLktJTE8gKyBcIlwiKSArIFwiS1wiXG4gICAgICAgICAgICA6IHQudG9TdHJpbmcoKTtcbiAgICB9O1xuICAgIHQuUmFuZG9tSW50ID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogKGUgLSB0ICsgMSkgKyB0IC0gMSk7XG4gICAgfTtcbiAgICB0LnN0cmluZ1RvTnVtQXJyID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgaWYgKCF0KSByZXR1cm4gZTtcbiAgICAgICAgZm9yICh2YXIgbyA9IHQuc3BsaXQoXCI7XCIpLCBuID0gMCwgaSA9IG8ubGVuZ3RoOyBuIDwgaTsgbisrKSBlLnB1c2godGhpcy5wYXJzZU51bShvW25dKSk7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH07XG4gICAgdC5jbGFtcCA9IGZ1bmN0aW9uICh0LCBlLCBvKSB7XG4gICAgICAgIGUgPiBvICYmIChlID0gW28sIChvID0gZSldWzBdKTtcbiAgICAgICAgdCA+IG8gJiYgKHQgPSBvKTtcbiAgICAgICAgKHQgPCBlIHx8IE51bWJlci5pc05hTih0KSkgJiYgKHQgPSBlKTtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICB0LktJTE8gPSAxZTM7XG4gICAgdC5NSUxMSU9OID0gMWU2O1xuICAgIHQuVEVOQklMTElPTiA9IDFlOTtcbiAgICB0LkJJTExJT04gPSAxZTg7XG4gICAgdC5URU5LSUxPID0gMWU0O1xuICAgIHJldHVybiB0O1xufSkoKTtcbmV4cG9ydHMuZGVmYXVsdCA9IG47XG4iXX0=