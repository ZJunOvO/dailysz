
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/mySafeArea.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '92030QpL0pPP4FHS+/UWwhC', 'mySafeArea');
// scripts/mySafeArea.js

"use strict";

var n;
Object.defineProperty(exports, "__esModule", {
  value: !0
});
exports.getSafeAreaRect = void 0;

var _global = require("global");

var s = cc._decorator;
var c = s.ccclass;
var l = (s.property, null);

exports.getSafeAreaRect = function () {
  if (!l) {
    var t = cc.sys;
    if (_global["default"].padScale) l = new cc.Rect(0, 0, 720, 1560);else if (t.platform == t.ALIPAY_GAME) l = new cc.Rect(0, 62, 720, 1560);else {
      var e = cc.sys.getSafeAreaRect();
      var o = e.y;
      t.platform == t.WECHAT_GAME && o < 62 && (o = 62);
      l = new cc.Rect(e.x, o, e.width, e.height);
    }
  }

  return l;
};

var u = function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }

  __extends(e, t);

  e.prototype.updateArea = function () {
    if (cc.sys.platform != cc.sys.ALIPAY_GAME) {
      var t = this.node.getComponent(cc.Widget);

      if (t) {
        t.updateAlignment();
        var e = this.node.position;
        var n = this.node.getAnchorPoint();
        t.isAlignTop = t.isAlignBottom = t.isAlignLeft = t.isAlignRight = !0;
        var i = cc.winSize.width;
        var r = cc.winSize.height;
        var a = exports.getSafeAreaRect();
        t.top = r - a.y - a.height;
        t.bottom = a.y;
        t.left = a.x;
        t.right = i - a.x - a.width;
        t.updateAlignment();
        var s = this.node.position;
        var c = n.x - (s.x - e.x) / this.node.width;
        var l = n.y - (s.y - e.y) / this.node.height;
        this.node.setAnchorPoint(c, l);

        cc._widgetManager.add(t);
      }
    }
  };

  return __decorate([c], e);
}(cc.SafeArea);

exports["default"] = u;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbXlTYWZlQXJlYS5qcyJdLCJuYW1lcyI6WyJuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRTYWZlQXJlYVJlY3QiLCJfZ2xvYmFsIiwicmVxdWlyZSIsInMiLCJjYyIsIl9kZWNvcmF0b3IiLCJjIiwiY2NjbGFzcyIsImwiLCJwcm9wZXJ0eSIsInQiLCJzeXMiLCJwYWRTY2FsZSIsIlJlY3QiLCJwbGF0Zm9ybSIsIkFMSVBBWV9HQU1FIiwiZSIsIm8iLCJ5IiwiV0VDSEFUX0dBTUUiLCJ4Iiwid2lkdGgiLCJoZWlnaHQiLCJ1IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfX2V4dGVuZHMiLCJwcm90b3R5cGUiLCJ1cGRhdGVBcmVhIiwibm9kZSIsImdldENvbXBvbmVudCIsIldpZGdldCIsInVwZGF0ZUFsaWdubWVudCIsInBvc2l0aW9uIiwiZ2V0QW5jaG9yUG9pbnQiLCJpc0FsaWduVG9wIiwiaXNBbGlnbkJvdHRvbSIsImlzQWxpZ25MZWZ0IiwiaXNBbGlnblJpZ2h0IiwiaSIsIndpblNpemUiLCJyIiwiYSIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInNldEFuY2hvclBvaW50IiwiX3dpZGdldE1hbmFnZXIiLCJhZGQiLCJfX2RlY29yYXRlIiwiU2FmZUFyZWEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBSjtBQUNBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0VBQUNDLEtBQUssRUFBRSxDQUFDO0FBQVQsQ0FBN0M7QUFDQUQsT0FBTyxDQUFDRSxlQUFSLEdBQTBCLEtBQUssQ0FBL0I7O0FBQ0EsSUFBSUMsT0FBTyxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFyQjs7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLEVBQUUsQ0FBQ0MsVUFBWDtBQUNBLElBQUlDLENBQUMsR0FBR0gsQ0FBQyxDQUFD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QUN0QixDQUFOLEdBQVVzQixDQUFDLENBQUNyQixLQUF0QjtRQUNBWCxDQUFDLENBQUNzQixlQUFGO1FBQ0EsSUFBSTdCLENBQUMsR0FBRyxLQUFLMEIsSUFBTCxDQUFVSSxRQUFsQjtRQUNBLElBQUkzQixDQUFDLEdBQUdYLENBQUMsQ0FBQ3lCLENBQUYsR0FBTSxDQUFDakIsQ0FBQyxDQUFDaUIsQ0FBRixHQUFNSixDQUFDLENBQUNJLENBQVQsSUFBYyxLQUFLUyxJQUFMLENBQVVSLEtBQXRDO1FBQ0EsSUFBSWIsQ0FBQyxHQUFHYixDQUFDLENBQUN1QixDQUFGLEdBQU0sQ0FBQ2YsQ0FBQyxDQUFDZSxDQUFGLEdBQU1GLENBQUMsQ0FBQ0UsQ0FBVCxJQUFjLEtBQUtXLElBQUwsQ0FBVVAsTUFBdEM7UUFDQSxLQUFLTyxJQUFMLENBQVVrQixjQUFWLENBQXlCekMsQ0FBekIsRUFBNEJFLENBQTVCOztRQUNBSixFQUFFLENBQUM0QyxjQUFILENBQWtCQyxHQUFsQixDQUFzQnZDLENBQXRCO01BQ0g7SUFDSjtFQUNKLENBdkJEOztFQXdCQSxPQUFPd0MsVUFBVSxDQUFDLENBQUM1QyxDQUFELENBQUQsRUFBTVUsQ0FBTixDQUFqQjtBQUNILENBOUJPLENBOEJMWixFQUFFLENBQUMrQyxRQTlCRSxDQUFSOztBQStCQXJELE9BQU8sV0FBUCxHQUFrQnlCLENBQWxCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiAhMH0pO1xuZXhwb3J0cy5nZXRTYWZlQXJlYVJlY3QgPSB2b2lkIDA7XG52YXIgX2dsb2JhbCA9IHJlcXVpcmUoXCJnbG9iYWxcIik7XG52YXIgcyA9IGNjLl9kZWNvcmF0b3I7XG52YXIgYyA9IHMuY2NjbGFzcztcbnZhciBsID0gKHMucHJvcGVydHksIG51bGwpO1xuZXhwb3J0cy5nZXRTYWZlQXJlYVJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFsKSB7XG4gICAgICAgIHZhciB0ID0gY2Muc3lzO1xuICAgICAgICBpZiAoX2dsb2JhbC5kZWZhdWx0LnBhZFNjYWxlKSBsID0gbmV3IGNjLlJlY3QoMCwgMCwgNzIwLCAxNTYwKTtcbiAgICAgICAgZWxzZSBpZiAodC5wbGF0Zm9ybSA9PSB0LkFMSVBBWV9HQU1FKSBsID0gbmV3IGNjLlJlY3QoMCwgNjIsIDcyMCwgMTU2MCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGUgPSBjYy5zeXMuZ2V0U2FmZUFyZWFSZWN0KCk7XG4gICAgICAgICAgICB2YXIgbyA9IGUueTtcbiAgICAgICAgICAgIHQucGxhdGZvcm0gPT0gdC5XRUNIQVRfR0FNRSAmJiBvIDwgNjIgJiYgKG8gPSA2Mik7XG4gICAgICAgICAgICBsID0gbmV3IGNjLlJlY3QoZS54LCBvLCBlLndpZHRoLCBlLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGw7XG59O1xudmFyIHUgPSAoZnVuY3Rpb24gKHQpIHtcbiAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICByZXR1cm4gKG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBfX2V4dGVuZHMoZSwgdCk7XG4gICAgZS5wcm90b3R5cGUudXBkYXRlQXJlYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNjLnN5cy5wbGF0Zm9ybSAhPSBjYy5zeXMuQUxJUEFZX0dBTUUpIHtcbiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5XaWRnZXQpO1xuICAgICAgICAgICAgaWYgKHQpIHtcbiAgICAgICAgICAgICAgICB0LnVwZGF0ZUFsaWdubWVudCgpO1xuICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5ub2RlLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5ub2RlLmdldEFuY2hvclBvaW50KCk7XG4gICAgICAgICAgICAgICAgdC5pc0FsaWduVG9wID0gdC5pc0FsaWduQm90dG9tID0gdC5pc0FsaWduTGVmdCA9IHQuaXNBbGlnblJpZ2h0ID0gITA7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBjYy53aW5TaXplLndpZHRoO1xuICAgICAgICAgICAgICAgIHZhciByID0gY2Mud2luU2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBleHBvcnRzLmdldFNhZmVBcmVhUmVjdCgpO1xuICAgICAgICAgICAgICAgIHQudG9wID0gciAtIGEueSAtIGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHQuYm90dG9tID0gYS55O1xuICAgICAgICAgICAgICAgIHQubGVmdCA9IGEueDtcbiAgICAgICAgICAgICAgICB0LnJpZ2h0ID0gaSAtIGEueCAtIGEud2lkdGg7XG4gICAgICAgICAgICAgICAgdC51cGRhdGVBbGlnbm1lbnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMubm9kZS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IG4ueCAtIChzLnggLSBlLngpIC8gdGhpcy5ub2RlLndpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBsID0gbi55IC0gKHMueSAtIGUueSkgLyB0aGlzLm5vZGUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZS5zZXRBbmNob3JQb2ludChjLCBsKTtcbiAgICAgICAgICAgICAgICBjYy5fd2lkZ2V0TWFuYWdlci5hZGQodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBfX2RlY29yYXRlKFtjXSwgZSk7XG59KShjYy5TYWZlQXJlYSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1O1xuIl19