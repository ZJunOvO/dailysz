
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/scrollView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c59d3G5OhpCHoMi9impffT1', 'scrollView');
// scripts/scrollView.js

"use strict";

var n;
Object.defineProperty(exports, "__esModule", {
  value: !0
});
var a = cc._decorator;
var s = a.ccclass;
var c = a.property;

var l = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.maxScale = 1.5;
    e.minScale = 0.5;
    e.brake = 0.75;
    e.content = null;
    e._touchMovePreviousTimestamp = 0;
    e._autoScrolling = !1;
    e._touchMoveDisplacements = [];
    e._touchMoveTimeDeltas = [];
    e._autoScrollAccumulatedTime = 0;
    e._autoScrollTotalTime = 0;
    e._autoScrollStartPosition = cc.v2(0, 0);
    e._autoScrollTargetDelta = cc.Vec2.ZERO;
    e._isHandleMultiTouch = !1;
    e._isOnDestScrolling = !1;
    return e;
  }

  __extends(e, t);

  e.prototype.onLoad = function () {
    var t = this.content;
    var e = cc.Node.EventType;
    t.on(e.TOUCH_START, this.onTouchStart, this);
    t.on(e.TOUCH_MOVE, this.onTouchMove, this);
    t.on(e.TOUCH_END, this.onTouchEnd, this);
    t.on(e.TOUCH_CANCEL, this.onTouchEnd, this);
  };

  e.prototype.onDestroy = function () {
    var t = this.content;
    var e = cc.Node.EventType;
    t.off(e.TOUCH_START, this.onTouchStart, this);
    t.off(e.TOUCH_MOVE, this.onTouchMove, this);
    t.off(e.TOUCH_END, this.onTouchEnd, this);
    t.off(e.TOUCH_CANCEL, this.onTouchEnd, this);
  };

  e.prototype.onTouchStart = function () {
    this.resetTouchInfos();
  };

  e.prototype.onTouchMove = function (t) {
    if (!this._isOnDestScrolling) {
      var e = t.getTouches();

      if (1 == e.length) {
        var o = t.getDelta();
        this.moveContent(o);
        this.gatherTouchMove(o);
      } else {
        this._isHandleMultiTouch = !0;
        var n = e[0];
        var i = e[1];

        if (!this._initLen) {
          this._initLen = n.getPreviousLocation().sub(i.getPreviousLocation()).mag();
          var r = n.getStartLocation().add(i.getStartLocation()).divide(2);
          var a = this.node.convertToNodeSpaceAR(r);
          var s = this.node.convertToWorldSpaceAR(a);
          this._initPos = this.content.convertToNodeSpaceAR(s);
          this._initScale = this.content.scale;
        }

        var c = n.getLocation().sub(i.getLocation()).mag();
        var l = this._initScale * (c / this._initLen);
        if (l > this.maxScale || l < this.minScale) return;
        this._tarScale = l;
        this._scrollZoom = !0;
      }
    }
  };

  e.prototype.onTouchEnd = function (t) {
    this._isOnDestScrolling || (this._isHandleMultiTouch ? this._scrollZoom = null : (this.gatherTouchMove(t.getDelta()), this.startInertiaScroll()), this._isHandleMultiTouch = !1);
  };

  e.prototype.update = function (t) {
    if (this._scrollZoom) {
      var e = this.content.scale;
      var o = this._tarScale;
      var n = e + 0.5 * (o - e);
      var i = n - e;

      var r = this._initPos.mul(-i);

      this.content.scale = n;
      this.moveContent(r);
      this._scrollZoom = Math.abs(n - o) > 0.01;
    } else this._autoScrolling && this.processAutoScrolling(t);
  };

  e.prototype.calculateTouchMoveVelocity = function () {
    var t = 0;
    if ((t = this._touchMoveTimeDeltas.reduce(function (t, e) {
      return t + e;
    }, t)) <= 0 || t >= 0.5) return cc.v2(0, 0);
    var e = cc.v2(0, 0);
    e = this._touchMoveDisplacements.reduce(function (t, e) {
      return t.add(e);
    }, e);
    return cc.v2(e.x * (1 - this.brake) / t, e.y * (1 - this.brake) / t);
  };

  e.prototype.processAutoScrolling = function (t) {
    this._autoScrollAccumulatedTime += t;
    var e;
    var o = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
    e = o;
    o = (e -= 1) * e * e * e * e + 1;

    var n = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(o));

    Math.abs(o - 1) <= 1e-4 && (this._autoScrolling = !1);
    var i = n.sub(this.content.getPosition());
    this.moveContent(this._clampDelta(i));
  };

  e.prototype.startAttenuatingAutoScroll = function (t, e) {
    var o = Math.sqrt(Math.sqrt(e.mag() / 5));
    var n = t.normalize();
    var i = this.content.getContentSize();
    var r = this.node.getContentSize();
    var a = i.width - r.width;
    var s = i.height - r.height;
    var c = this.calculateAttenuatedFactor(a);
    var l = this.calculateAttenuatedFactor(s);
    n = cc.v2(n.x * a * (1 - this.brake) * c, n.y * s * l * (1 - this.brake));
    var u = t.mag();
    var p = n.mag() / u;
    n = n.add(t);
    this.brake > 0 && p > 7 && (p = Math.sqrt(p), n = t.mul(p).add(t));
    this.brake > 0 && p > 3 && (o *= p = 3);
    0 === this.brake && p > 1 && (o *= p);
    this.startAutoScroll(n, o);
  };

  e.prototype.calculateAttenuatedFactor = function (t) {
    return this.brake <= 0 ? 1 - this.brake : (1 - this.brake) * (1 / (1 + 14e-6 * t + t * t * 8e-9));
  };

  e.prototype.startInertiaScroll = function () {
    var t = this.calculateTouchMoveVelocity();

    if (!t.fuzzyEquals(cc.v2(0, 0), 1e-4) && this.brake < 1) {
      var e = t.mul(0.7);
      this.startAttenuatingAutoScroll(e, t);
    }
  };

  e.prototype.startAutoScroll = function (t, e) {
    this._autoScrolling = !0;
    this._autoScrollTargetDelta = t;
    this._autoScrollStartPosition = this.content.getPosition();
    this._autoScrollTotalTime = e;
    this._autoScrollAccumulatedTime = 0;
  };

  e.prototype._clampDelta = function (t) {
    var e = this.content.getContentSize();
    var o = this.node.getContentSize();
    e.width < o.width && (t.x = 0);
    e.height < o.height && (t.y = 0);
    return t;
  };

  e.prototype.moveContent = function (t, e) {
    var o = this;
    void 0 === e && (e = 0);
    return new Promise(function (n) {
      var i = t;
      var r = o.content.getPosition().add(i);
      r.x > o.boundX ? (r.x = o.boundX, o._autoScrolling = !1) : r.x < -o.boundX && (r.x = -o.boundX, o._autoScrolling = !1);
      r.y > o.boundY ? (r.y = o.boundY, o._autoScrolling = !1) : r.y < -o.boundY && (r.y = -o.boundY, o._autoScrolling = !1);
      e > 0 ? cc.tween(o.content).to(e, {
        position: cc.v3(r.x, r.y)
      }).call(function () {
        n();
      }).start() : (o.content.setPosition(r), n());
    });
  };

  e.prototype.getTimeInMilliseconds = function () {
    return new Date().getMilliseconds();
  };

  e.prototype.gatherTouchMove = function (t) {
    for (t = this._clampDelta(t); this._touchMoveDisplacements.length >= 5;) {
      this._touchMoveDisplacements.shift(), this._touchMoveTimeDeltas.shift();
    }

    this._touchMoveDisplacements.push(t);

    var e = this.getTimeInMilliseconds();

    this._touchMoveTimeDeltas.push((e - this._touchMovePreviousTimestamp) / 1e3);

    this._touchMovePreviousTimestamp = e;
  };

  Object.defineProperty(e.prototype, "boundY", {
    get: function get() {
      return this.content.height * this.content.scaleY / 2 - this.node.height / 2;
    },
    enumerable: !1,
    configurable: !0
  });
  Object.defineProperty(e.prototype, "boundX", {
    get: function get() {
      return this.content.width * this.content.scaleX / 2 - this.node.width / 2;
    },
    enumerable: !1,
    configurable: !0
  });

  e.prototype.scrollTo = function (t, e) {
    var o = this;
    void 0 === e && (e = 0);
    this._isOnDestScrolling = !0;
    this.resetTouchInfos();
    return new Promise(function (n) {
      o.moveContent(t.mul(-1), e).then(function () {
        o._isOnDestScrolling = !1;
        n();
      });
    });
  };

  e.prototype.resetTouchInfos = function () {
    this._autoScrolling = !1;
    this._touchMovePreviousTimestamp = this.getTimeInMilliseconds();
    this._touchMoveDisplacements.length = 0;
    this._touchMoveTimeDeltas.length = 0;
    this._isHandleMultiTouch = !1;
    this._initLen = null;
  };

  e.prototype.stopAutoScroll = function () {
    this._autoScrolling = !1;
    this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
  };

  __decorate([c({
    tooltip: "最大可放大倍数",
    type: cc.Float
  })], e.prototype, "maxScale", void 0);

  __decorate([c({
    tooltip: "最小可缩小倍数",
    type: cc.Float
  })], e.prototype, "minScale", void 0);

  __decorate([c({
    tooltip: "滚动之后的减速系数",
    type: cc.Float
  })], e.prototype, "brake", void 0);

  __decorate([c(cc.Node)], e.prototype, "content", void 0);

  return __decorate([s], e);
}(cc.Component);

exports["default"] = l;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcc2Nyb2xsVmlldy5qcyJdLCJuYW1lcyI6WyJuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhIiwiY2MiLCJfZGVjb3JhdG9yIiwicyIsImNjY2xhc3MiLCJjIiwicHJvcGVydHkiLCJsIiwidCIsImUiLCJhcHBseSIsImFyZ3VtZW50cyIsIm1heFNjYWxlIiwibWluU2NhbGUiLCJicmFrZSIsImNvbnRlbnQiLCJfdG91Y2hNb3ZlUHJldmlvdXNUaW1lc3RhbXAiLCJfYXV0b1Njcm9sbGluZyIsIl90b3VjaE1vdmVEaXNwbGFjZW1lbnRzIiwiX3RvdWNoTW92ZVRpbWVEZWx0YXMiLCJfYXV0b1Njcm9sbEFjY3VtdWxhdGVkVGltZSIsIl9hdXRvU2Nyb2xsVG90YWxUaW1lIiwiX2F1dG9TY3JvbGxTdGFydFBvc2l0aW9uIiwidjIiLCJfYXV0b1Njcm9sbFRhcmdldERlbHRhIiwiVmVjMiIsIlpFUk8iLCJfaXNIYW5kbGVNdWx0aVRvdWNoIiwiX2lzT25EZXN0U2Nyb2xsaW5nIiwiX19leHRlbmRzIiwicHJvdG90eXBlIiwib25Mb2FkIiwiTm9kZSIsIkV2ZW50VHlwZSIsIm9uIiwiVE9VQ0hfU1RBUlQiLCJvblRvdWNoU3RhcnQiLCJUT1VDSF9NT1ZFIiwib25Ub3VjaE1vdmUiLCJUT1VDSF9FTkQiLCJvblRvdWNoRW5kIiwiVE9VQ0hfQ0FOQ0VMIiwib25EZXN0cm95Iiwib2ZmIiwicmVzZXRUb3VjaEluZm9zIiwiZ2V0VG91Y2hlcyIsImxlbmd0aCIsIm8iLCJnZXREZWx0YSIsIm1vdmVDb250ZW50IiwiZ2F0aGVyVG91Y2hNb3ZlIiwiaSIsIl9pbml0TGVuIiwiZ2V0UHJldmlvdXNMb2NhdGlvbiIsInN1YiIsIm1hZyIsInIiLCJnZXRTdGFydExvY2F0aW9uIiwiYWRkIiwiZGl2aWRlIiwibm9kZSIsImNvbnZlcnRUb05vZGVTcGFjZUFSIiwiY29udmVydFRvV29ybGRTcGFjZUFSIiwiX2luaXRQb3MiLCJfaW5pdFNjYWxlIiwic2NhbGUiLCJnZXRMb2NhdGlvbiIsIl90YXJTY2FsZSIsIl9zY3JvbGxab29tIiwic3RhcnRJbmVydGlhU2Nyb2xsIiwidXBkYXRlIiwibXVsIiwiTWF0aCIsImFicyIsInByb2Nlc3NBdXRvU2Nyb2xsaW5nIiwiY2FsY3VsYXRlVG91Y2hNb3ZlVmVsb2NpdHkiLCJyZWR1Y2UiLCJ4IiwieSIsIm1pbiIsImdldFBvc2l0aW9uIiwiX2NsYW1wRGVsdGEiLCJzdGFydEF0dGVudWF0aW5nQXV0b1Njcm9sbCIsInNxcnQiLCJub3JtYWxpemUiLCJnZXRDb250ZW50U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2FsY3VsYXRlQXR0ZW51YXRlZEZhY3RvciIsInUiLCJwIiwic3RhcnRBdXRvU2Nyb2xsIiwiZnV6enlFcXVhbHMiLCJQcm9taXNlIiwiYm91bmRYIiwiYm91bmRZIiwidHdlZW4iLCJ0byIsInBvc2l0aW9uIiwidjMiLCJjYWxsIiwic3RhcnQiLCJzZXRQb3NpdGlvbiIsImdldFRpbWVJbk1pbGxpc2Vjb25kcyIsIkRhdGUiLCJnZXRNaWxsaXNlY29uZHMiLCJzaGlmdCIsInB1c2giLCJnZXQiLCJzY2FsZVkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwic2NhbGVYIiwic2Nyb2xsVG8iLCJ0aGVuIiwic3RvcEF1dG9TY3JvbGwiLCJfX2RlY29yYXRlIiwidG9vbHRpcCIsInR5cGUiLCJGbG9hdCIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFKO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFBQ0MsS0FBSyxFQUFFLENBQUM7QUFBVCxDQUE3QztBQUNBLElBQUlDLENBQUMsR0FBR0MsRUFBRSxDQUFDQyxVQUFYO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNJLE9BQVY7QUFDQSxJQUFJQyxDQUFDLEdBQUdMLENBQUMsQ0FBQ00s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S0FBS0csMEJBQUwsR0FBa0MsS0FBS0Msb0JBQXZDO0VBQ0gsQ0FIRDs7RUFJQStGLFVBQVUsQ0FBQyxDQUFDL0csQ0FBQyxDQUFDO0lBQUNnSCxPQUFPLEVBQUUsU0FBVjtJQUFxQkMsSUFBSSxFQUFFckgsRUFBRSxDQUFDc0g7RUFBOUIsQ0FBRCxDQUFGLENBQUQsRUFBNEM5RyxDQUFDLENBQUNxQixTQUE5QyxFQUF5RCxVQUF6RCxFQUFxRSxLQUFLLENBQTFFLENBQVY7O0VBQ0FzRixVQUFVLENBQUMsQ0FBQy9HLENBQUMsQ0FBQztJQUFDZ0gsT0FBTyxFQUFFLFNBQVY7SUFBcUJDLElBQUksRUFBRXJILEVBQUUsQ0FBQ3NIO0VBQTlCLENBQUQsQ0FBRixDQUFELEVBQTRDOUcsQ0FBQyxDQUFDcUIsU0FBOUMsRUFBeUQsVUFBekQsRUFBcUUsS0FBSyxDQUExRSxDQUFWOztFQUNBc0YsVUFBVSxDQUFDLENBQUMvRyxDQUFDLENBQUM7SUFBQ2dILE9BQU8sRUFBRSxXQUFWO0lBQXVCQyxJQUFJLEVBQUVySCxFQUFFLENBQUNzSDtFQUFoQyxDQUFELENBQUYsQ0FBRCxFQUE4QzlHLENBQUMsQ0FBQ3FCLFNBQWhELEVBQTJELE9BQTNELEVBQW9FLEtBQUssQ0FBekUsQ0FBVjs7RUFDQXNGLFVBQVUsQ0FBQyxDQUFDL0csQ0FBQyxDQUFDSixFQUFFLENBQUMrQixJQUFKLENBQUYsQ0FBRCxFQUFldkIsQ0FBQyxDQUFDcUIsU0FBakIsRUFBNEIsU0FBNUIsRUFBdUMsS0FBSyxDQUE1QyxDQUFWOztFQUNBLE9BQU9zRixVQUFVLENBQUMsQ0FBQ2pILENBQUQsQ0FBRCxFQUFNTSxDQUFOLENBQWpCO0FBQ0gsQ0F0T08sQ0FzT0xSLEVBQUUsQ0FBQ3VILFNBdE9FLENBQVI7O0FBdU9BMUgsT0FBTyxXQUFQLEdBQWtCUyxDQUFsQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG47XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogITB9KTtcbnZhciBhID0gY2MuX2RlY29yYXRvcjtcbnZhciBzID0gYS5jY2NsYXNzO1xudmFyIGMgPSBhLnByb3BlcnR5O1xudmFyIGwgPSAoZnVuY3Rpb24gKHQpIHtcbiAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICB2YXIgZSA9IChudWxsICE9PSB0ICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgfHwgdGhpcztcbiAgICAgICAgZS5tYXhTY2FsZSA9IDEuNTtcbiAgICAgICAgZS5taW5TY2FsZSA9IDAuNTtcbiAgICAgICAgZS5icmFrZSA9IDAuNzU7XG4gICAgICAgIGUuY29udGVudCA9IG51bGw7XG4gICAgICAgIGUuX3RvdWNoTW92ZVByZXZpb3VzVGltZXN0YW1wID0gMDtcbiAgICAgICAgZS5fYXV0b1Njcm9sbGluZyA9ICExO1xuICAgICAgICBlLl90b3VjaE1vdmVEaXNwbGFjZW1lbnRzID0gW107XG4gICAgICAgIGUuX3RvdWNoTW92ZVRpbWVEZWx0YXMgPSBbXTtcbiAgICAgICAgZS5fYXV0b1Njcm9sbEFjY3VtdWxhdGVkVGltZSA9IDA7XG4gICAgICAgIGUuX2F1dG9TY3JvbGxUb3RhbFRpbWUgPSAwO1xuICAgICAgICBlLl9hdXRvU2Nyb2xsU3RhcnRQb3NpdGlvbiA9IGNjLnYyKDAsIDApO1xuICAgICAgICBlLl9hdXRvU2Nyb2xsVGFyZ2V0RGVsdGEgPSBjYy5WZWMyLlpFUk87XG4gICAgICAgIGUuX2lzSGFuZGxlTXVsdGlUb3VjaCA9ICExO1xuICAgICAgICBlLl9pc09uRGVzdFNjcm9sbGluZyA9ICExO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgX19leHRlbmRzKGUsIHQpO1xuICAgIGUucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmNvbnRlbnQ7XG4gICAgICAgIHZhciBlID0gY2MuTm9kZS5FdmVudFR5cGU7XG4gICAgICAgIHQub24oZS5UT1VDSF9TVEFSVCwgdGhpcy5vblRvdWNoU3RhcnQsIHRoaXMpO1xuICAgICAgICB0Lm9uKGUuVE9VQ0hfTU9WRSwgdGhpcy5vblRvdWNoTW92ZSwgdGhpcyk7XG4gICAgICAgIHQub24oZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XG4gICAgICAgIHQub24oZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5jb250ZW50O1xuICAgICAgICB2YXIgZSA9IGNjLk5vZGUuRXZlbnRUeXBlO1xuICAgICAgICB0Lm9mZihlLlRPVUNIX1NUQVJULCB0aGlzLm9uVG91Y2hTdGFydCwgdGhpcyk7XG4gICAgICAgIHQub2ZmKGUuVE9VQ0hfTU9WRSwgdGhpcy5vblRvdWNoTW92ZSwgdGhpcyk7XG4gICAgICAgIHQub2ZmKGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xuICAgICAgICB0Lm9mZihlLlRPVUNIX0NBTkNFTCwgdGhpcy5vblRvdWNoRW5kLCB0aGlzKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uVG91Y2hTdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXNldFRvdWNoSW5mb3MoKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uVG91Y2hNb3ZlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc09uRGVzdFNjcm9sbGluZykge1xuICAgICAgICAgICAgdmFyIGUgPSB0LmdldFRvdWNoZXMoKTtcbiAgICAgICAgICAgIGlmICgxID09IGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG8gPSB0LmdldERlbHRhKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlQ29udGVudChvKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhdGhlclRvdWNoTW92ZShvKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNIYW5kbGVNdWx0aVRvdWNoID0gITA7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBlWzBdO1xuICAgICAgICAgICAgICAgIHZhciBpID0gZVsxXTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2luaXRMZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdExlbiA9IG4uZ2V0UHJldmlvdXNMb2NhdGlvbigpLnN1YihpLmdldFByZXZpb3VzTG9jYXRpb24oKSkubWFnKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gbi5nZXRTdGFydExvY2F0aW9uKCkuYWRkKGkuZ2V0U3RhcnRMb2NhdGlvbigpKS5kaXZpZGUoMik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5ub2RlLmNvbnZlcnRUb05vZGVTcGFjZUFSKHIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHRoaXMubm9kZS5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIoYSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luaXRQb3MgPSB0aGlzLmNvbnRlbnQuY29udmVydFRvTm9kZVNwYWNlQVIocyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luaXRTY2FsZSA9IHRoaXMuY29udGVudC5zY2FsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBuLmdldExvY2F0aW9uKCkuc3ViKGkuZ2V0TG9jYXRpb24oKSkubWFnKCk7XG4gICAgICAgICAgICAgICAgdmFyIGwgPSB0aGlzLl9pbml0U2NhbGUgKiAoYyAvIHRoaXMuX2luaXRMZW4pO1xuICAgICAgICAgICAgICAgIGlmIChsID4gdGhpcy5tYXhTY2FsZSB8fCBsIDwgdGhpcy5taW5TY2FsZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhclNjYWxlID0gbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxab29tID0gITA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uVG91Y2hFbmQgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLl9pc09uRGVzdFNjcm9sbGluZyB8fFxuICAgICAgICAgICAgKHRoaXMuX2lzSGFuZGxlTXVsdGlUb3VjaFxuICAgICAgICAgICAgICAgID8gKHRoaXMuX3Njcm9sbFpvb20gPSBudWxsKVxuICAgICAgICAgICAgICAgIDogKHRoaXMuZ2F0aGVyVG91Y2hNb3ZlKHQuZ2V0RGVsdGEoKSksIHRoaXMuc3RhcnRJbmVydGlhU2Nyb2xsKCkpLFxuICAgICAgICAgICAgKHRoaXMuX2lzSGFuZGxlTXVsdGlUb3VjaCA9ICExKSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICBpZiAodGhpcy5fc2Nyb2xsWm9vbSkge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNvbnRlbnQuc2NhbGU7XG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMuX3RhclNjYWxlO1xuICAgICAgICAgICAgdmFyIG4gPSBlICsgMC41ICogKG8gLSBlKTtcbiAgICAgICAgICAgIHZhciBpID0gbiAtIGU7XG4gICAgICAgICAgICB2YXIgciA9IHRoaXMuX2luaXRQb3MubXVsKC1pKTtcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5zY2FsZSA9IG47XG4gICAgICAgICAgICB0aGlzLm1vdmVDb250ZW50KHIpO1xuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsWm9vbSA9IE1hdGguYWJzKG4gLSBvKSA+IDAuMDE7XG4gICAgICAgIH0gZWxzZSB0aGlzLl9hdXRvU2Nyb2xsaW5nICYmIHRoaXMucHJvY2Vzc0F1dG9TY3JvbGxpbmcodCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5jYWxjdWxhdGVUb3VjaE1vdmVWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQgPSAwO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAodCA9IHRoaXMuX3RvdWNoTW92ZVRpbWVEZWx0YXMucmVkdWNlKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgKyBlO1xuICAgICAgICAgICAgfSwgdCkpIDw9IDAgfHxcbiAgICAgICAgICAgIHQgPj0gMC41XG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiBjYy52MigwLCAwKTtcbiAgICAgICAgdmFyIGUgPSBjYy52MigwLCAwKTtcbiAgICAgICAgZSA9IHRoaXMuX3RvdWNoTW92ZURpc3BsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC5hZGQoZSk7XG4gICAgICAgIH0sIGUpO1xuICAgICAgICByZXR1cm4gY2MudjIoKGUueCAqICgxIC0gdGhpcy5icmFrZSkpIC8gdCwgKGUueSAqICgxIC0gdGhpcy5icmFrZSkpIC8gdCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5wcm9jZXNzQXV0b1Njcm9sbGluZyA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHRoaXMuX2F1dG9TY3JvbGxBY2N1bXVsYXRlZFRpbWUgKz0gdDtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIHZhciBvID0gTWF0aC5taW4oMSwgdGhpcy5fYXV0b1Njcm9sbEFjY3VtdWxhdGVkVGltZSAvIHRoaXMuX2F1dG9TY3JvbGxUb3RhbFRpbWUpO1xuICAgICAgICBlID0gbztcbiAgICAgICAgbyA9IChlIC09IDEpICogZSAqIGUgKiBlICogZSArIDE7XG4gICAgICAgIHZhciBuID0gdGhpcy5fYXV0b1Njcm9sbFN0YXJ0UG9zaXRpb24uYWRkKHRoaXMuX2F1dG9TY3JvbGxUYXJnZXREZWx0YS5tdWwobykpO1xuICAgICAgICBNYXRoLmFicyhvIC0gMSkgPD0gMWUtNCAmJiAodGhpcy5fYXV0b1Njcm9sbGluZyA9ICExKTtcbiAgICAgICAgdmFyIGkgPSBuLnN1Yih0aGlzLmNvbnRlbnQuZ2V0UG9zaXRpb24oKSk7XG4gICAgICAgIHRoaXMubW92ZUNvbnRlbnQodGhpcy5fY2xhbXBEZWx0YShpKSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5zdGFydEF0dGVudWF0aW5nQXV0b1Njcm9sbCA9IGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgIHZhciBvID0gTWF0aC5zcXJ0KE1hdGguc3FydChlLm1hZygpIC8gNSkpO1xuICAgICAgICB2YXIgbiA9IHQubm9ybWFsaXplKCk7XG4gICAgICAgIHZhciBpID0gdGhpcy5jb250ZW50LmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIHZhciByID0gdGhpcy5ub2RlLmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIHZhciBhID0gaS53aWR0aCAtIHIud2lkdGg7XG4gICAgICAgIHZhciBzID0gaS5oZWlnaHQgLSByLmhlaWdodDtcbiAgICAgICAgdmFyIGMgPSB0aGlzLmNhbGN1bGF0ZUF0dGVudWF0ZWRGYWN0b3IoYSk7XG4gICAgICAgIHZhciBsID0gdGhpcy5jYWxjdWxhdGVBdHRlbnVhdGVkRmFjdG9yKHMpO1xuICAgICAgICBuID0gY2MudjIobi54ICogYSAqICgxIC0gdGhpcy5icmFrZSkgKiBjLCBuLnkgKiBzICogbCAqICgxIC0gdGhpcy5icmFrZSkpO1xuICAgICAgICB2YXIgdSA9IHQubWFnKCk7XG4gICAgICAgIHZhciBwID0gbi5tYWcoKSAvIHU7XG4gICAgICAgIG4gPSBuLmFkZCh0KTtcbiAgICAgICAgdGhpcy5icmFrZSA+IDAgJiYgcCA+IDcgJiYgKChwID0gTWF0aC5zcXJ0KHApKSwgKG4gPSB0Lm11bChwKS5hZGQodCkpKTtcbiAgICAgICAgdGhpcy5icmFrZSA+IDAgJiYgcCA+IDMgJiYgKG8gKj0gcCA9IDMpO1xuICAgICAgICAwID09PSB0aGlzLmJyYWtlICYmIHAgPiAxICYmIChvICo9IHApO1xuICAgICAgICB0aGlzLnN0YXJ0QXV0b1Njcm9sbChuLCBvKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmNhbGN1bGF0ZUF0dGVudWF0ZWRGYWN0b3IgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5icmFrZSA8PSAwID8gMSAtIHRoaXMuYnJha2UgOiAoMSAtIHRoaXMuYnJha2UpICogKDEgLyAoMSArIDE0ZS02ICogdCArIHQgKiB0ICogOGUtOSkpO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuc3RhcnRJbmVydGlhU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMuY2FsY3VsYXRlVG91Y2hNb3ZlVmVsb2NpdHkoKTtcbiAgICAgICAgaWYgKCF0LmZ1enp5RXF1YWxzKGNjLnYyKDAsIDApLCAxZS00KSAmJiB0aGlzLmJyYWtlIDwgMSkge1xuICAgICAgICAgICAgdmFyIGUgPSB0Lm11bCgwLjcpO1xuICAgICAgICAgICAgdGhpcy5zdGFydEF0dGVudWF0aW5nQXV0b1Njcm9sbChlLCB0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgZS5wcm90b3R5cGUuc3RhcnRBdXRvU2Nyb2xsID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgdGhpcy5fYXV0b1Njcm9sbGluZyA9ICEwO1xuICAgICAgICB0aGlzLl9hdXRvU2Nyb2xsVGFyZ2V0RGVsdGEgPSB0O1xuICAgICAgICB0aGlzLl9hdXRvU2Nyb2xsU3RhcnRQb3NpdGlvbiA9IHRoaXMuY29udGVudC5nZXRQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLl9hdXRvU2Nyb2xsVG90YWxUaW1lID0gZTtcbiAgICAgICAgdGhpcy5fYXV0b1Njcm9sbEFjY3VtdWxhdGVkVGltZSA9IDA7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5fY2xhbXBEZWx0YSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIHZhciBlID0gdGhpcy5jb250ZW50LmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIHZhciBvID0gdGhpcy5ub2RlLmdldENvbnRlbnRTaXplKCk7XG4gICAgICAgIGUud2lkdGggPCBvLndpZHRoICYmICh0LnggPSAwKTtcbiAgICAgICAgZS5oZWlnaHQgPCBvLmhlaWdodCAmJiAodC55ID0gMCk7XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUubW92ZUNvbnRlbnQgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHZhciBpID0gdDtcbiAgICAgICAgICAgIHZhciByID0gby5jb250ZW50LmdldFBvc2l0aW9uKCkuYWRkKGkpO1xuICAgICAgICAgICAgci54ID4gby5ib3VuZFhcbiAgICAgICAgICAgICAgICA/ICgoci54ID0gby5ib3VuZFgpLCAoby5fYXV0b1Njcm9sbGluZyA9ICExKSlcbiAgICAgICAgICAgICAgICA6IHIueCA8IC1vLmJvdW5kWCAmJiAoKHIueCA9IC1vLmJvdW5kWCksIChvLl9hdXRvU2Nyb2xsaW5nID0gITEpKTtcbiAgICAgICAgICAgIHIueSA+IG8uYm91bmRZXG4gICAgICAgICAgICAgICAgPyAoKHIueSA9IG8uYm91bmRZKSwgKG8uX2F1dG9TY3JvbGxpbmcgPSAhMSkpXG4gICAgICAgICAgICAgICAgOiByLnkgPCAtby5ib3VuZFkgJiYgKChyLnkgPSAtby5ib3VuZFkpLCAoby5fYXV0b1Njcm9sbGluZyA9ICExKSk7XG4gICAgICAgICAgICBlID4gMFxuICAgICAgICAgICAgICAgID8gY2NcbiAgICAgICAgICAgICAgICAgICAgICAudHdlZW4oby5jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgIC50byhlLCB7cG9zaXRpb246IGNjLnYzKHIueCwgci55KX0pXG4gICAgICAgICAgICAgICAgICAgICAgLmNhbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAuc3RhcnQoKVxuICAgICAgICAgICAgICAgIDogKG8uY29udGVudC5zZXRQb3NpdGlvbihyKSwgbigpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5nZXRUaW1lSW5NaWxsaXNlY29uZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldE1pbGxpc2Vjb25kcygpO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuZ2F0aGVyVG91Y2hNb3ZlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgZm9yICh0ID0gdGhpcy5fY2xhbXBEZWx0YSh0KTsgdGhpcy5fdG91Y2hNb3ZlRGlzcGxhY2VtZW50cy5sZW5ndGggPj0gNTsgKVxuICAgICAgICAgICAgdGhpcy5fdG91Y2hNb3ZlRGlzcGxhY2VtZW50cy5zaGlmdCgpLCB0aGlzLl90b3VjaE1vdmVUaW1lRGVsdGFzLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoTW92ZURpc3BsYWNlbWVudHMucHVzaCh0KTtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmdldFRpbWVJbk1pbGxpc2Vjb25kcygpO1xuICAgICAgICB0aGlzLl90b3VjaE1vdmVUaW1lRGVsdGFzLnB1c2goKGUgLSB0aGlzLl90b3VjaE1vdmVQcmV2aW91c1RpbWVzdGFtcCkgLyAxZTMpO1xuICAgICAgICB0aGlzLl90b3VjaE1vdmVQcmV2aW91c1RpbWVzdGFtcCA9IGU7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsIFwiYm91bmRZXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuY29udGVudC5oZWlnaHQgKiB0aGlzLmNvbnRlbnQuc2NhbGVZKSAvIDIgLSB0aGlzLm5vZGUuaGVpZ2h0IC8gMjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsIFwiYm91bmRYXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuY29udGVudC53aWR0aCAqIHRoaXMuY29udGVudC5zY2FsZVgpIC8gMiAtIHRoaXMubm9kZS53aWR0aCAvIDI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICBjb25maWd1cmFibGU6ICEwXG4gICAgfSk7XG4gICAgZS5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIHZvaWQgMCA9PT0gZSAmJiAoZSA9IDApO1xuICAgICAgICB0aGlzLl9pc09uRGVzdFNjcm9sbGluZyA9ICEwO1xuICAgICAgICB0aGlzLnJlc2V0VG91Y2hJbmZvcygpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIG8ubW92ZUNvbnRlbnQodC5tdWwoLTEpLCBlKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBvLl9pc09uRGVzdFNjcm9sbGluZyA9ICExO1xuICAgICAgICAgICAgICAgIG4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLnJlc2V0VG91Y2hJbmZvcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYXV0b1Njcm9sbGluZyA9ICExO1xuICAgICAgICB0aGlzLl90b3VjaE1vdmVQcmV2aW91c1RpbWVzdGFtcCA9IHRoaXMuZ2V0VGltZUluTWlsbGlzZWNvbmRzKCk7XG4gICAgICAgIHRoaXMuX3RvdWNoTW92ZURpc3BsYWNlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fdG91Y2hNb3ZlVGltZURlbHRhcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9pc0hhbmRsZU11bHRpVG91Y2ggPSAhMTtcbiAgICAgICAgdGhpcy5faW5pdExlbiA9IG51bGw7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5zdG9wQXV0b1Njcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYXV0b1Njcm9sbGluZyA9ICExO1xuICAgICAgICB0aGlzLl9hdXRvU2Nyb2xsQWNjdW11bGF0ZWRUaW1lID0gdGhpcy5fYXV0b1Njcm9sbFRvdGFsVGltZTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW2Moe3Rvb2x0aXA6IFwi5pyA5aSn5Y+v5pS+5aSn5YCN5pWwXCIsIHR5cGU6IGNjLkZsb2F0fSldLCBlLnByb3RvdHlwZSwgXCJtYXhTY2FsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2Moe3Rvb2x0aXA6IFwi5pyA5bCP5Y+v57yp5bCP5YCN5pWwXCIsIHR5cGU6IGNjLkZsb2F0fSldLCBlLnByb3RvdHlwZSwgXCJtaW5TY2FsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2Moe3Rvb2x0aXA6IFwi5rua5Yqo5LmL5ZCO55qE5YeP6YCf57O75pWwXCIsIHR5cGU6IGNjLkZsb2F0fSldLCBlLnByb3RvdHlwZSwgXCJicmFrZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2MoY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJjb250ZW50XCIsIHZvaWQgMCk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGUoW3NdLCBlKTtcbn0pKGNjLkNvbXBvbmVudCk7XG5leHBvcnRzLmRlZmF1bHQgPSBsO1xuIl19