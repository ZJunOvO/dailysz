
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/ui_getRes.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '5dcedloo3JKQKfpXRHkTJiZ', 'ui_getRes');
// scripts/ui_getRes.js

"use strict";

var n;
Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _evts = require("evts");

var _idx = require("idx");

var _res = require("res");

var _uData = require("uData");

var _cfgMgr = require("cfgMgr");

var _lang = require("lang");

var _item = require("item");

var _bagMgr = require("bagMgr");

var _panelMgr = require("panelMgr");

var _tipMgr = require("tipMgr");

var _pInfo = require("pInfo");

var _baseUI = require("baseUI");

var v = cc._decorator;
var _ = v.ccclass;
var b = v.property;

var w = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.typeSps = [];
    e.iconSps = [];
    e.titleLb = null;
    e.iconSpr = null;
    e.proNodes = [];
    e.tarNodes = [];
    e.getLbs = [];
    e.tarNums = [];
    e.adNode = null;
    e.giftNode = null;
    e.packNode = null;
    e.doubleNode = null;
    e.packItems = [];
    e.priceLb = null;
    e.eventFunc = null;
    e.shopData = null;
    e.isDouble = !1;
    return e;
  }

  __extends(e, t);

  e.prototype.init = function (t) {
    var e = this;
    var o = t.itemId;
    var n = t.cb;
    var i = t.gType;
    var r = t.useTo;
    this.tarNodes[0].active = !1;
    this.tarNodes[1].active = !1;
    this.tarNodes[2].active = !1;
    this.itemId = o;
    this.closeCb = n;
    var a = r || "";
    var s = _cfgMgr["default"].serverCfg;
    var d = this.data = {};

    switch (o) {
      case "times":
        this.titleLb.string = "体力不足", this.iconSpr.spriteFrame = this.iconSps[1];

        var h = _pInfo["default"].ins.getPowerAdTimes(),
            f = _uData["default"].ins.getIsNewUser() ? s.times.forUser.new_user.rules.level : s.times.forUser.all.rules.level,
            g = f[h];

        d.normalGet = d.adGet = g.rules.val, this.proNodes[1].active = !1, this.getLbs[0].string = "+" + f[0].rules.val, this.getLbs[2].string = "+" + f[1].rules.val, this.tarNums[0].string = h + "/1", this.tarNums[2].string = h + "/2", 1 === h && (this.tarNodes[0].active = !0), this.adNode.adDotData = "主线-体力";
        break;

      case "coin":
        this.titleLb.string = "元宝不足", this.iconSpr.spriteFrame = this.iconSps[0];

        var m = _pInfo["default"].ins.getCoinAdTimes(),
            v = s.ad_coin_rules.rules.level,
            _ = v[m];

        d.normalGet = d.adGet = _.rules.val;

        for (var b = 0; b < 3; b++) {
          this.proNodes[b].active = !0, this.getLbs[b].string = "+" + v[b].rules.val, m > b ? (this.tarNums[b].string = b + 1 + "/" + (b + 1), this.tarNodes[b].active = !0) : this.tarNums[b].string = m + "/" + (b + 1);
        }

        var w = "主线";
        _lang.gemeTypeKey[i] && (w = _lang.gemeTypeKey[i]), this.adNode.adDotData = w + "-元宝-" + a;
    }

    _res["default"].ins.getBundleByString("resSps").then(function (t) {
      t.load("item/" + o, cc.SpriteFrame, function (t, o) {
        !t && e.node && e.node.isValid && e.typeSps.forEach(function (t) {
          t.spriteFrame = o;
        });
      }), t.load("spine/light/action", sp.SkeletonData, function (t, o) {
        if (!t && e.node && e.node.isValid) {
          var n = new cc.Node();
          var i = n.addComponent(sp.Skeleton);
          i.skeletonData = o, i.animation = "animation", n.parent = e.iconSpr.node;
        }
      });
    })["catch"](function (t) {
      console.error("RTool.ins.getBundleByString('resSps')", t);
    });

    this.initPack();
  };

  e.prototype.hideThis = function () {
    var t;
    null === (t = this.closeCb) || void 0 === t || t.call(this);
    this.hide();
  };

  e.prototype.initPack = function () {
    var t;
    var e;
    var o = _cfgMgr["default"].serverCfg;
    var n = ("times" === this.itemId ? null === (t = null == o ? void 0 : o.buy_stamina) || void 0 === t ? void 0 : t.stamina : null === (e = null == o ? void 0 : o.buy_gold_coins) || void 0 === e ? void 0 : e.gold_coins)["times" === this.itemId ? "times2" : "coin7"];

    if (n) {
      this.packNode.active = !0;
      this.shopData = n;
      var i = n.key;

      var r = _pInfo["default"].ins.getShopUnreset();

      var a = n["double"] || 0;
      var s = r[i] || 0;
      var c = this.isDouble = this.doubleNode.active = s < a;
      this.packItems.forEach(function (t) {
        t.node.active = !0;
      });
      var l = n.props;

      for (var p in l) {
        var d = Number(l[p]);
        c ? (this.packItems[0].initByData(p, 2 * d), this.packItems[1].initByData(p, d), this.packItems[2].initByData(p, d)) : (this.packItems[0].initByData(p, d), this.packItems[1].initByData(p, d), this.packItems[2].node.active = !1);
      }

      this.priceLb.string = "¥" + n.price;
    } else this.packNode.active = !1;
  };

  e.prototype.onAdGet = function () {
    this.getItem(!0);
  };

  e.prototype.getItem = function (t) {
    this.tarNodes[0].active = !1;
    this.tarNodes[1].active = !1;
    this.tarNodes[2].active = !1;
    var e = this.data;
    var o = t ? e.normalGet : e.adGet;
    var n = _pInfo["default"].ins;
    var i = _cfgMgr["default"].serverCfg;

    switch (this.itemId) {
      case "times":
        n.addPower(o, !1), n.addPowerAdTimes(), this.proNodes[1].active = !1;
        var r = _uData["default"].ins.getIsNewUser() ? i.times.forUser.new_user.rules.level : i.times.forUser.all.rules.level,
            c = n.getPowerAdTimes(),
            p = r[c];
        e.normalGet = e.adGet = p.rules.val, 1 === c ? (this.tarNodes[0].active = !0, this.tarNums[0].string = c + "/1", this.tarNums[2].string = c + "/2") : 0 === c && (this.tarNodes[0].active = !0, this.tarNodes[2].active = !0, this.tarNums[0].string = "1/1", this.tarNums[2].string = "2/2"), !_pInfo["default"].ins.isMaxAdCount() && _idx.platform.reportEvent(_idx.ERepEvt.buyTimes);
        break;

      case "coin":
        n.addCoin(o, !1), n.addCoinAdTimes();

        var d = _pInfo["default"].ins.getCoinAdTimes(),
            h = i.ad_coin_rules.rules.level[d];

        e.normalGet = e.adGet = h.rules.val;

        for (var g = 0; g < 3; g++) {
          this.proNodes[g].active = !0, d > g ? (this.tarNums[g].string = g + 1 + "/" + (g + 1), this.tarNodes[g].active = !0) : this.tarNums[g].string = d + "/" + (g + 1);
        }

        !_pInfo["default"].ins.isMaxAdCount() && _idx.platform.reportEvent(_idx.ERepEvt.buyCoins);
    }

    var m = this.iconSpr.node;
    var v = m.parent.convertToWorldSpaceAR(m.position);

    _panelMgr["default"].ins.open("ui/ui_flyAni", {
      itemDatas: [{
        itemId: this.itemId,
        worldPos: v,
        value: o
      }],
      hideCb: function hideCb() {
        _evts["default"].opE.emit({
          action: _evts["default"].POWER_CHG
        });

        _evts["default"].opE.emit({
          action: _evts["default"].COIN_CHG
        });
      }
    });
  };

  e.prototype.onDestroy = function () {
    cc.assetManager.releaseAsset(this.iconSpr.spriteFrame);
  };

  e.prototype.onBtnBuy = function () {
    var t = this;

    if (this.shopData) {
      var e = this.isDouble ? 1 : 0;
      var o = this.shopData.props;
      var n = JSON.stringify(this.shopData.props);

      _idx.platform.reportEvent(_idx.ERepEvt.susPayment, {
        key: this.shopData.key
      });

      _idx.platform.payment(this.shopData.key, this.shopData.price, e, n).then(function () {
        var e = [];

        for (var n in o) {
          var i = o[n];
          t.isDouble && (i *= 2);

          _bagMgr["default"].ins.addItem(n, i);

          var r = {};
          r.itemId = n;
          r.worldPos = t.packItems[0].node.parent.convertToWorldSpaceAR(t.packItems[0].node.position);
          r.value = i;
          e.push(r);
        }

        _panelMgr["default"].ins.open("ui/ui_flyAni", {
          itemDatas: e
        });

        _pInfo["default"].ins.addShopUnreset(t.shopData.key);

        t.initPack();

        _idx.platform.reportEvent(_idx.ERepEvt.paymentResult, {
          key: t.shopData.key,
          success: 1
        });
      })["catch"](function (e) {
        _tipMgr["default"].ins.showTip(e, !0);

        _idx.platform.reportEvent(_idx.ERepEvt.paymentResult, {
          key: t.shopData.key,
          success: 0
        });
      });
    }
  };

  e.prototype.onBtnShop = function () {
    this.hideThis();

    _evts["default"].opE.emit({
      action: _evts["default"].MAINJUMP,
      data: 0
    });

    _panelMgr["default"].ins.open("ui/ui_shopPack", null).then(function () {
      _evts["default"].opE.emit({
        action: _evts["default"].UPD_MAIN_RED
      });
    });
  };

  __decorate([b([cc.Sprite])], e.prototype, "typeSps", void 0);

  __decorate([b([cc.SpriteFrame])], e.prototype, "iconSps", void 0);

  __decorate([b(cc.Label)], e.prototype, "titleLb", void 0);

  __decorate([b(cc.Sprite)], e.prototype, "iconSpr", void 0);

  __decorate([b([cc.Node])], e.prototype, "proNodes", void 0);

  __decorate([b([cc.Node])], e.prototype, "tarNodes", void 0);

  __decorate([b([cc.Label])], e.prototype, "getLbs", void 0);

  __decorate([b([cc.Label])], e.prototype, "tarNums", void 0);

  __decorate([b(cc.Node)], e.prototype, "adNode", void 0);

  __decorate([b(cc.Node)], e.prototype, "giftNode", void 0);

  __decorate([b(cc.Node)], e.prototype, "packNode", void 0);

  __decorate([b(cc.Node)], e.prototype, "doubleNode", void 0);

  __decorate([b([_item["default"]])], e.prototype, "packItems", void 0);

  __decorate([b(cc.Label)], e.prototype, "priceLb", void 0);

  return __decorate([_], e);
}(_baseUI["default"]);

exports["default"] = w;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcdWlfZ2V0UmVzLmpzIl0sIm5hbWVzIjpbIm4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9ldnRzIiwicmVxdWlyZSIsIl9pZHgiLCJfcmVzIiwiX3VEYXRhIiwiX2NmZ01nciIsIl9sYW5nIiwiX2l0ZW0iLCJfYmFnTWdyIiwiX3BhbmVsTWdyIiwiX3RpcE1nciIsIl9wSW5mbyIsIl9iYXNlVUkiLCJ2IiwiY2MiLCJfZGVjb3JhdG9yIiwiXyIsImNjY2xhc3MiLCJiIiwicHJvcGVydHkiLCJ3IiwidCIsImUiLCJhcHBseSIsImFyZ3VtZW50cyIsInR5cGVTcHMiLCJpY29uU3BzIiwidGl0bGVMYiIsImljb25TcHIiLCJwcm9Ob2RlcyIsInRhck5vZGVzIiwiZ2V0TGJzIiwidGFyTnVtcyIsImFkTm9kZSIsImdpZnROb2RlIiwicGFja05vZGUiLCJkb3VibGVOb2RlIiwicGFja0l0ZW1zIiwicHJpY2VMYiIsImV2ZW50RnVuYyIsInNob3BEYXRhIiwiaXNEb3VibGUiLCJfX2V4dGVuZHMiLCJwcm90b3R5cGUiLCJpbml0IiwibyIsIml0ZW1JZCIsImNiIiwiaSIsImdUeXBlIiwiciIsInVzZVRvIiwiYWN0aXZlIiwiY2xvc2VDYiIsImEiLCJzIiwic2VydmVyQ2ZnIiwiZCIsImRhdGEiLCJzdHJpbmciLCJzcHJpdGVGcmFtZSIsImgiLCJpbnMiLCJnZXRQb3dlckFkVGltZXMiLCJmIiwiZ2V0SXNOZXdVc2VyIiwidGltZXMiLCJmb3JVc2VyIiwibmV3X3VzZXIiLCJydWxlcyIsImxldmVsIiwiYWxsIiwiZyIsIm5vcm1hbEdldCIsImFkR2V0IiwidmFsIiwiYWREb3REYXRhIiwibSIsImdldENvaW5BZFRpbWVzIiwiYWRfY29pbl9ydWxlcyIsImdlbWVUeXBlS2V5IiwiZ2V0QnVuZGxlQnlTdHJpbmciLCJ0aGVuIiwibG9hZCIsIlNwcml0ZUZyYW1lIiwibm9kZSIsImlzVmFsaWQiLCJmb3JFYWNoIiwic3AiLCJTa2VsZXRvbkRhdGEiLCJOb2RlIiwiYWRkQ29tcG9uZW50IiwiU2tlbGV0b24iLCJza2VsZXRvbkRhdGEiLCJhbmltYXRpb24iLCJwYXJlbnQiLCJjb25zb2xlIiwiZXJyb3IiLCJpbml0UGFjayIsImhpZGVUaGlzIiwiY2FsbCIsImhpZGUiLCJidXlfc3RhbWluYSIsInN0YW1pbmEiLCJidXlfZ29sZF9jb2lucyIsImdvbGRfY29pbnMiLCJrZXkiLCJnZXRTaG9wVW5yZXNldCIsImMiLCJsIiwicHJvcHMiLCJwIiwiTnVtYmVyIiwiaW5pdEJ5RGF0YSIsInByaWNlIiwib25BZEdldCIsImdldEl0ZW0iLCJhZGRQb3dlciIsImFkZFBvd2VyQWRUaW1lcyIsImlzTWF4QWRDb3VudCIsInBsYXRmb3JtIiwicmVwb3J0RXZlbnQiLCJFUmVwRXZ0IiwiYnV5VGltZXMiLCJhZGRDb2luIiwiYWRkQ29pbkFkVGltZXMiLCJidXlDb2lucyIsImNvbnZlcnRUb1dvcmxkU3BhY2VBUiIsInBvc2l0aW9uIiwib3BlbiIsIml0ZW1EYXRhcyIsIndvcmxkUG9zIiwiaGlkZUNiIiwib3BFIiwiZW1pdCIsImFjdGlvbiIsIlBPV0VSX0NIRyIsIkNPSU5fQ0hHIiwib25EZXN0cm95IiwiYXNzZXRNYW5hZ2VyIiwicmVsZWFzZUFzc2V0Iiwib25CdG5CdXkiLCJKU09OIiwic3RyaW5naWZ5Iiwic3VzUGF5bWVudCIsInBheW1lbnQiLCJhZGRJdGVtIiwicHVzaCIsImFkZFNob3BVbnJlc2V0IiwicGF5bWVudFJlc3VsdCIsInN1Y2Nlc3MiLCJzaG93VGlwIiwib25CdG5TaG9wIiwiTUFJTkpVTVAiLCJVUERfTUFJTl9SRUQiLCJfX2RlY29yYXRlIiwiU3ByaXRlIiwiTGFiZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBSjtBQUNBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0VBQUNDLEtBQUssRUFBRSxDQUFDO0FB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bmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiAhMH0pO1xudmFyIF9ldnRzID0gcmVxdWlyZShcImV2dHNcIik7XG52YXIgX2lkeCA9IHJlcXVpcmUoXCJpZHhcIik7XG52YXIgX3JlcyA9IHJlcXVpcmUoXCJyZXNcIik7XG52YXIgX3VEYXRhID0gcmVxdWlyZShcInVEYXRhXCIpO1xudmFyIF9jZmdNZ3IgPSByZXF1aXJlKFwiY2ZnTWdyXCIpO1xudmFyIF9sYW5nID0gcmVxdWlyZShcImxhbmdcIik7XG52YXIgX2l0ZW0gPSByZXF1aXJlKFwiaXRlbVwiKTtcbnZhciBfYmFnTWdyID0gcmVxdWlyZShcImJhZ01nclwiKTtcbnZhciBfcGFuZWxNZ3IgPSByZXF1aXJlKFwicGFuZWxNZ3JcIik7XG52YXIgX3RpcE1nciA9IHJlcXVpcmUoXCJ0aXBNZ3JcIik7XG52YXIgX3BJbmZvID0gcmVxdWlyZShcInBJbmZvXCIpO1xudmFyIF9iYXNlVUkgPSByZXF1aXJlKFwiYmFzZVVJXCIpO1xudmFyIHYgPSBjYy5fZGVjb3JhdG9yO1xudmFyIF8gPSB2LmNjY2xhc3M7XG52YXIgYiA9IHYucHJvcGVydHk7XG52YXIgdyA9IChmdW5jdGlvbiAodCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHZhciBlID0gKG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB8fCB0aGlzO1xuICAgICAgICBlLnR5cGVTcHMgPSBbXTtcbiAgICAgICAgZS5pY29uU3BzID0gW107XG4gICAgICAgIGUudGl0bGVMYiA9IG51bGw7XG4gICAgICAgIGUuaWNvblNwciA9IG51bGw7XG4gICAgICAgIGUucHJvTm9kZXMgPSBbXTtcbiAgICAgICAgZS50YXJOb2RlcyA9IFtdO1xuICAgICAgICBlLmdldExicyA9IFtdO1xuICAgICAgICBlLnRhck51bXMgPSBbXTtcbiAgICAgICAgZS5hZE5vZGUgPSBudWxsO1xuICAgICAgICBlLmdpZnROb2RlID0gbnVsbDtcbiAgICAgICAgZS5wYWNrTm9kZSA9IG51bGw7XG4gICAgICAgIGUuZG91YmxlTm9kZSA9IG51bGw7XG4gICAgICAgIGUucGFja0l0ZW1zID0gW107XG4gICAgICAgIGUucHJpY2VMYiA9IG51bGw7XG4gICAgICAgIGUuZXZlbnRGdW5jID0gbnVsbDtcbiAgICAgICAgZS5zaG9wRGF0YSA9IG51bGw7XG4gICAgICAgIGUuaXNEb3VibGUgPSAhMTtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIF9fZXh0ZW5kcyhlLCB0KTtcbiAgICBlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB2YXIgbyA9IHQuaXRlbUlkO1xuICAgICAgICB2YXIgbiA9IHQuY2I7XG4gICAgICAgIHZhciBpID0gdC5nVHlwZTtcbiAgICAgICAgdmFyIHIgPSB0LnVzZVRvO1xuICAgICAgICB0aGlzLnRhck5vZGVzWzBdLmFjdGl2ZSA9ICExO1xuICAgICAgICB0aGlzLnRhck5vZGVzWzFdLmFjdGl2ZSA9ICExO1xuICAgICAgICB0aGlzLnRhck5vZGVzWzJdLmFjdGl2ZSA9ICExO1xuICAgICAgICB0aGlzLml0ZW1JZCA9IG87XG4gICAgICAgIHRoaXMuY2xvc2VDYiA9IG47XG4gICAgICAgIHZhciBhID0gciB8fCBcIlwiO1xuICAgICAgICB2YXIgcyA9IF9jZmdNZ3IuZGVmYXVsdC5zZXJ2ZXJDZmc7XG4gICAgICAgIHZhciBkID0gKHRoaXMuZGF0YSA9IHt9KTtcbiAgICAgICAgc3dpdGNoIChvKSB7XG4gICAgICAgICAgICBjYXNlIFwidGltZXNcIjpcbiAgICAgICAgICAgICAgICAodGhpcy50aXRsZUxiLnN0cmluZyA9IFwi5L2T5Yqb5LiN6LazXCIpLCAodGhpcy5pY29uU3ByLnNwcml0ZUZyYW1lID0gdGhpcy5pY29uU3BzWzFdKTtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IF9wSW5mby5kZWZhdWx0Lmlucy5nZXRQb3dlckFkVGltZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgZiA9IF91RGF0YS5kZWZhdWx0Lmlucy5nZXRJc05ld1VzZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzLnRpbWVzLmZvclVzZXIubmV3X3VzZXIucnVsZXMubGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcy50aW1lcy5mb3JVc2VyLmFsbC5ydWxlcy5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgZyA9IGZbaF07XG4gICAgICAgICAgICAgICAgKGQubm9ybWFsR2V0ID0gZC5hZEdldCA9IGcucnVsZXMudmFsKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMucHJvTm9kZXNbMV0uYWN0aXZlID0gITEpLFxuICAgICAgICAgICAgICAgICAgICAodGhpcy5nZXRMYnNbMF0uc3RyaW5nID0gXCIrXCIgKyBmWzBdLnJ1bGVzLnZhbCksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmdldExic1syXS5zdHJpbmcgPSBcIitcIiArIGZbMV0ucnVsZXMudmFsKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudGFyTnVtc1swXS5zdHJpbmcgPSBoICsgXCIvMVwiKSxcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMudGFyTnVtc1syXS5zdHJpbmcgPSBoICsgXCIvMlwiKSxcbiAgICAgICAgICAgICAgICAgICAgMSA9PT0gaCAmJiAodGhpcy50YXJOb2Rlc1swXS5hY3RpdmUgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmFkTm9kZS5hZERvdERhdGEgPSBcIuS4u+e6vy3kvZPliptcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29pblwiOlxuICAgICAgICAgICAgICAgICh0aGlzLnRpdGxlTGIuc3RyaW5nID0gXCLlhYPlrp3kuI3otrNcIiksICh0aGlzLmljb25TcHIuc3ByaXRlRnJhbWUgPSB0aGlzLmljb25TcHNbMF0pO1xuICAgICAgICAgICAgICAgIHZhciBtID0gX3BJbmZvLmRlZmF1bHQuaW5zLmdldENvaW5BZFRpbWVzKCksXG4gICAgICAgICAgICAgICAgICAgIHYgPSBzLmFkX2NvaW5fcnVsZXMucnVsZXMubGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgIF8gPSB2W21dO1xuICAgICAgICAgICAgICAgIGQubm9ybWFsR2V0ID0gZC5hZEdldCA9IF8ucnVsZXMudmFsO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgMzsgYisrKVxuICAgICAgICAgICAgICAgICAgICAodGhpcy5wcm9Ob2Rlc1tiXS5hY3RpdmUgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5nZXRMYnNbYl0uc3RyaW5nID0gXCIrXCIgKyB2W2JdLnJ1bGVzLnZhbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtID4gYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKCh0aGlzLnRhck51bXNbYl0uc3RyaW5nID0gYiArIDEgKyBcIi9cIiArIChiICsgMSkpLCAodGhpcy50YXJOb2Rlc1tiXS5hY3RpdmUgPSAhMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAodGhpcy50YXJOdW1zW2JdLnN0cmluZyA9IG0gKyBcIi9cIiArIChiICsgMSkpO1xuICAgICAgICAgICAgICAgIHZhciB3ID0gXCLkuLvnur9cIjtcbiAgICAgICAgICAgICAgICBfbGFuZy5nZW1lVHlwZUtleVtpXSAmJiAodyA9IF9sYW5nLmdlbWVUeXBlS2V5W2ldKSwgKHRoaXMuYWROb2RlLmFkRG90RGF0YSA9IHcgKyBcIi3lhYPlrp0tXCIgKyBhKTtcbiAgICAgICAgfVxuICAgICAgICBfcmVzLmRlZmF1bHQuaW5zXG4gICAgICAgICAgICAuZ2V0QnVuZGxlQnlTdHJpbmcoXCJyZXNTcHNcIilcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdC5sb2FkKFwiaXRlbS9cIiArIG8sIGNjLlNwcml0ZUZyYW1lLCBmdW5jdGlvbiAodCwgbykge1xuICAgICAgICAgICAgICAgICAgICAhdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5ub2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBlLm5vZGUuaXNWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS50eXBlU3BzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNwcml0ZUZyYW1lID0gbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB0LmxvYWQoXCJzcGluZS9saWdodC9hY3Rpb25cIiwgc3AuU2tlbGV0b25EYXRhLCBmdW5jdGlvbiAodCwgbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ICYmIGUubm9kZSAmJiBlLm5vZGUuaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3IGNjLk5vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IG4uYWRkQ29tcG9uZW50KHNwLlNrZWxldG9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaS5za2VsZXRvbkRhdGEgPSBvKSwgKGkuYW5pbWF0aW9uID0gXCJhbmltYXRpb25cIiksIChuLnBhcmVudCA9IGUuaWNvblNwci5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlJUb29sLmlucy5nZXRCdW5kbGVCeVN0cmluZygncmVzU3BzJylcIiwgdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbml0UGFjaygpO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuaGlkZVRoaXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0O1xuICAgICAgICBudWxsID09PSAodCA9IHRoaXMuY2xvc2VDYikgfHwgdm9pZCAwID09PSB0IHx8IHQuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5pbml0UGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQ7XG4gICAgICAgIHZhciBlO1xuICAgICAgICB2YXIgbyA9IF9jZmdNZ3IuZGVmYXVsdC5zZXJ2ZXJDZmc7XG4gICAgICAgIHZhciBuID0gKFxuICAgICAgICAgICAgXCJ0aW1lc1wiID09PSB0aGlzLml0ZW1JZFxuICAgICAgICAgICAgICAgID8gbnVsbCA9PT0gKHQgPSBudWxsID09IG8gPyB2b2lkIDAgOiBvLmJ1eV9zdGFtaW5hKSB8fCB2b2lkIDAgPT09IHRcbiAgICAgICAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgICAgICAgOiB0LnN0YW1pbmFcbiAgICAgICAgICAgICAgICA6IG51bGwgPT09IChlID0gbnVsbCA9PSBvID8gdm9pZCAwIDogby5idXlfZ29sZF9jb2lucykgfHwgdm9pZCAwID09PSBlXG4gICAgICAgICAgICAgICAgPyB2b2lkIDBcbiAgICAgICAgICAgICAgICA6IGUuZ29sZF9jb2luc1xuICAgICAgICApW1widGltZXNcIiA9PT0gdGhpcy5pdGVtSWQgPyBcInRpbWVzMlwiIDogXCJjb2luN1wiXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIHRoaXMucGFja05vZGUuYWN0aXZlID0gITA7XG4gICAgICAgICAgICB0aGlzLnNob3BEYXRhID0gbjtcbiAgICAgICAgICAgIHZhciBpID0gbi5rZXk7XG4gICAgICAgICAgICB2YXIgciA9IF9wSW5mby5kZWZhdWx0Lmlucy5nZXRTaG9wVW5yZXNldCgpO1xuICAgICAgICAgICAgdmFyIGEgPSBuLmRvdWJsZSB8fCAwO1xuICAgICAgICAgICAgdmFyIHMgPSByW2ldIHx8IDA7XG4gICAgICAgICAgICB2YXIgYyA9ICh0aGlzLmlzRG91YmxlID0gdGhpcy5kb3VibGVOb2RlLmFjdGl2ZSA9IHMgPCBhKTtcbiAgICAgICAgICAgIHRoaXMucGFja0l0ZW1zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0Lm5vZGUuYWN0aXZlID0gITA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBsID0gbi5wcm9wcztcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gbCkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gTnVtYmVyKGxbcF0pO1xuICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgPyAodGhpcy5wYWNrSXRlbXNbMF0uaW5pdEJ5RGF0YShwLCAyICogZCksXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWNrSXRlbXNbMV0uaW5pdEJ5RGF0YShwLCBkKSxcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhY2tJdGVtc1syXS5pbml0QnlEYXRhKHAsIGQpKVxuICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLnBhY2tJdGVtc1swXS5pbml0QnlEYXRhKHAsIGQpLFxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFja0l0ZW1zWzFdLmluaXRCeURhdGEocCwgZCksXG4gICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGFja0l0ZW1zWzJdLm5vZGUuYWN0aXZlID0gITEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJpY2VMYi5zdHJpbmcgPSBcIsKlXCIgKyBuLnByaWNlO1xuICAgICAgICB9IGVsc2UgdGhpcy5wYWNrTm9kZS5hY3RpdmUgPSAhMTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uQWRHZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZ2V0SXRlbSghMCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdGhpcy50YXJOb2Rlc1swXS5hY3RpdmUgPSAhMTtcbiAgICAgICAgdGhpcy50YXJOb2Rlc1sxXS5hY3RpdmUgPSAhMTtcbiAgICAgICAgdGhpcy50YXJOb2Rlc1syXS5hY3RpdmUgPSAhMTtcbiAgICAgICAgdmFyIGUgPSB0aGlzLmRhdGE7XG4gICAgICAgIHZhciBvID0gdCA/IGUubm9ybWFsR2V0IDogZS5hZEdldDtcbiAgICAgICAgdmFyIG4gPSBfcEluZm8uZGVmYXVsdC5pbnM7XG4gICAgICAgIHZhciBpID0gX2NmZ01nci5kZWZhdWx0LnNlcnZlckNmZztcbiAgICAgICAgc3dpdGNoICh0aGlzLml0ZW1JZCkge1xuICAgICAgICAgICAgY2FzZSBcInRpbWVzXCI6XG4gICAgICAgICAgICAgICAgbi5hZGRQb3dlcihvLCAhMSksIG4uYWRkUG93ZXJBZFRpbWVzKCksICh0aGlzLnByb05vZGVzWzFdLmFjdGl2ZSA9ICExKTtcbiAgICAgICAgICAgICAgICB2YXIgciA9IF91RGF0YS5kZWZhdWx0Lmlucy5nZXRJc05ld1VzZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBpLnRpbWVzLmZvclVzZXIubmV3X3VzZXIucnVsZXMubGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaS50aW1lcy5mb3JVc2VyLmFsbC5ydWxlcy5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgYyA9IG4uZ2V0UG93ZXJBZFRpbWVzKCksXG4gICAgICAgICAgICAgICAgICAgIHAgPSByW2NdO1xuICAgICAgICAgICAgICAgIChlLm5vcm1hbEdldCA9IGUuYWRHZXQgPSBwLnJ1bGVzLnZhbCksXG4gICAgICAgICAgICAgICAgICAgIDEgPT09IGNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKCh0aGlzLnRhck5vZGVzWzBdLmFjdGl2ZSA9ICEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudGFyTnVtc1swXS5zdHJpbmcgPSBjICsgXCIvMVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMudGFyTnVtc1syXS5zdHJpbmcgPSBjICsgXCIvMlwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMCA9PT0gYyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKHRoaXMudGFyTm9kZXNbMF0uYWN0aXZlID0gITApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50YXJOb2Rlc1syXS5hY3RpdmUgPSAhMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnRhck51bXNbMF0uc3RyaW5nID0gXCIxLzFcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnRhck51bXNbMl0uc3RyaW5nID0gXCIyLzJcIikpLFxuICAgICAgICAgICAgICAgICAgICAhX3BJbmZvLmRlZmF1bHQuaW5zLmlzTWF4QWRDb3VudCgpICYmIF9pZHgucGxhdGZvcm0ucmVwb3J0RXZlbnQoX2lkeC5FUmVwRXZ0LmJ1eVRpbWVzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjb2luXCI6XG4gICAgICAgICAgICAgICAgbi5hZGRDb2luKG8sICExKSwgbi5hZGRDb2luQWRUaW1lcygpO1xuICAgICAgICAgICAgICAgIHZhciBkID0gX3BJbmZvLmRlZmF1bHQuaW5zLmdldENvaW5BZFRpbWVzKCksXG4gICAgICAgICAgICAgICAgICAgIGggPSBpLmFkX2NvaW5fcnVsZXMucnVsZXMubGV2ZWxbZF07XG4gICAgICAgICAgICAgICAgZS5ub3JtYWxHZXQgPSBlLmFkR2V0ID0gaC5ydWxlcy52YWw7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCAzOyBnKyspXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnByb05vZGVzW2ddLmFjdGl2ZSA9ICEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPiBnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoKHRoaXMudGFyTnVtc1tnXS5zdHJpbmcgPSBnICsgMSArIFwiL1wiICsgKGcgKyAxKSksICh0aGlzLnRhck5vZGVzW2ddLmFjdGl2ZSA9ICEwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLnRhck51bXNbZ10uc3RyaW5nID0gZCArIFwiL1wiICsgKGcgKyAxKSk7XG4gICAgICAgICAgICAgICAgIV9wSW5mby5kZWZhdWx0Lmlucy5pc01heEFkQ291bnQoKSAmJiBfaWR4LnBsYXRmb3JtLnJlcG9ydEV2ZW50KF9pZHguRVJlcEV2dC5idXlDb2lucyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG0gPSB0aGlzLmljb25TcHIubm9kZTtcbiAgICAgICAgdmFyIHYgPSBtLnBhcmVudC5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIobS5wb3NpdGlvbik7XG4gICAgICAgIF9wYW5lbE1nci5kZWZhdWx0Lmlucy5vcGVuKFwidWkvdWlfZmx5QW5pXCIsIHtcbiAgICAgICAgICAgIGl0ZW1EYXRhczogW3tpdGVtSWQ6IHRoaXMuaXRlbUlkLCB3b3JsZFBvczogdiwgdmFsdWU6IG99XSxcbiAgICAgICAgICAgIGhpZGVDYjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9ldnRzLmRlZmF1bHQub3BFLmVtaXQoe2FjdGlvbjogX2V2dHMuZGVmYXVsdC5QT1dFUl9DSEd9KTtcbiAgICAgICAgICAgICAgICBfZXZ0cy5kZWZhdWx0Lm9wRS5lbWl0KHthY3Rpb246IF9ldnRzLmRlZmF1bHQuQ09JTl9DSEd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNjLmFzc2V0TWFuYWdlci5yZWxlYXNlQXNzZXQodGhpcy5pY29uU3ByLnNwcml0ZUZyYW1lKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uQnRuQnV5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLnNob3BEYXRhKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuaXNEb3VibGUgPyAxIDogMDtcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5zaG9wRGF0YS5wcm9wcztcbiAgICAgICAgICAgIHZhciBuID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zaG9wRGF0YS5wcm9wcyk7XG4gICAgICAgICAgICBfaWR4LnBsYXRmb3JtLnJlcG9ydEV2ZW50KF9pZHguRVJlcEV2dC5zdXNQYXltZW50LCB7a2V5OiB0aGlzLnNob3BEYXRhLmtleX0pO1xuICAgICAgICAgICAgX2lkeC5wbGF0Zm9ybVxuICAgICAgICAgICAgICAgIC5wYXltZW50KHRoaXMuc2hvcERhdGEua2V5LCB0aGlzLnNob3BEYXRhLnByaWNlLCBlLCBuKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IG9bbl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0LmlzRG91YmxlICYmIChpICo9IDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2JhZ01nci5kZWZhdWx0Lmlucy5hZGRJdGVtKG4sIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaXRlbUlkID0gbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIud29ybGRQb3MgPSB0LnBhY2tJdGVtc1swXS5ub2RlLnBhcmVudC5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIodC5wYWNrSXRlbXNbMF0ubm9kZS5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByLnZhbHVlID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfcGFuZWxNZ3IuZGVmYXVsdC5pbnMub3BlbihcInVpL3VpX2ZseUFuaVwiLCB7aXRlbURhdGFzOiBlfSk7XG4gICAgICAgICAgICAgICAgICAgIF9wSW5mby5kZWZhdWx0Lmlucy5hZGRTaG9wVW5yZXNldCh0LnNob3BEYXRhLmtleSk7XG4gICAgICAgICAgICAgICAgICAgIHQuaW5pdFBhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgX2lkeC5wbGF0Zm9ybS5yZXBvcnRFdmVudChfaWR4LkVSZXBFdnQucGF5bWVudFJlc3VsdCwge2tleTogdC5zaG9wRGF0YS5rZXksIHN1Y2Nlc3M6IDF9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGlwTWdyLmRlZmF1bHQuaW5zLnNob3dUaXAoZSwgITApO1xuICAgICAgICAgICAgICAgICAgICBfaWR4LnBsYXRmb3JtLnJlcG9ydEV2ZW50KF9pZHguRVJlcEV2dC5wYXltZW50UmVzdWx0LCB7a2V5OiB0LnNob3BEYXRhLmtleSwgc3VjY2VzczogMH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5vbkJ0blNob3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGlkZVRoaXMoKTtcbiAgICAgICAgX2V2dHMuZGVmYXVsdC5vcEUuZW1pdCh7YWN0aW9uOiBfZXZ0cy5kZWZhdWx0Lk1BSU5KVU1QLCBkYXRhOiAwfSk7XG4gICAgICAgIF9wYW5lbE1nci5kZWZhdWx0Lmlucy5vcGVuKFwidWkvdWlfc2hvcFBhY2tcIiwgbnVsbCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfZXZ0cy5kZWZhdWx0Lm9wRS5lbWl0KHthY3Rpb246IF9ldnRzLmRlZmF1bHQuVVBEX01BSU5fUkVEfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbYihbY2MuU3ByaXRlXSldLCBlLnByb3RvdHlwZSwgXCJ0eXBlU3BzXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbYihbY2MuU3ByaXRlRnJhbWVdKV0sIGUucHJvdG90eXBlLCBcImljb25TcHNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKGNjLkxhYmVsKV0sIGUucHJvdG90eXBlLCBcInRpdGxlTGJcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKGNjLlNwcml0ZSldLCBlLnByb3RvdHlwZSwgXCJpY29uU3ByXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbYihbY2MuTm9kZV0pXSwgZS5wcm90b3R5cGUsIFwicHJvTm9kZXNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKFtjYy5Ob2RlXSldLCBlLnByb3RvdHlwZSwgXCJ0YXJOb2Rlc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2IoW2NjLkxhYmVsXSldLCBlLnByb3RvdHlwZSwgXCJnZXRMYnNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKFtjYy5MYWJlbF0pXSwgZS5wcm90b3R5cGUsIFwidGFyTnVtc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2IoY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJhZE5vZGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiZ2lmdE5vZGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwicGFja05vZGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtiKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiZG91YmxlTm9kZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2IoW19pdGVtLmRlZmF1bHRdKV0sIGUucHJvdG90eXBlLCBcInBhY2tJdGVtc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW2IoY2MuTGFiZWwpXSwgZS5wcm90b3R5cGUsIFwicHJpY2VMYlwiLCB2b2lkIDApO1xuICAgIHJldHVybiBfX2RlY29yYXRlKFtfXSwgZSk7XG59KShfYmFzZVVJLmRlZmF1bHQpO1xuZXhwb3J0cy5kZWZhdWx0ID0gdztcbiJdfQ==