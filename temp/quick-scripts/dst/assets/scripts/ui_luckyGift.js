
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/ui_luckyGift.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6d3d4wIWL9INoHkuewVRpux', 'ui_luckyGift');
// scripts/ui_luckyGift.js

"use strict";

var n;
Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _cfgMgr = require("cfgMgr");

var _baseUI = require("baseUI");

var _com = require("com");

var _pInfo = require("pInfo");

var _bagMgr = require("bagMgr");

var _panelMgr = require("panelMgr");

var d = cc._decorator;
var h = d.ccclass;
var f = d.property;

var g = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.giftsNode = null;
    e.btn_start = null;
    e.pointerNode = null;
    e.labTip = null;
    e.proGiftNode = null;
    e.giftsDatas = null;
    e.isCurPlayAni = !1;
    e.drawedTime = 0;
    e.nowHaveTime = !1;
    e.crossedLevel = 0;
    e.proMax = 10;
    e.proGift = null;
    e.proGiftDatas = [];
    return e;
  }

  __extends(e, t);

  e.prototype.start = function () {
    this.giftsDatas = _cfgMgr["default"].serverCfg.lucky_gift.rules;
    this.pointRots = [0, 22, 67, 112, 157, 202, 247, 292, 337];
    this.isCurPlayAni = !1;
    this.proMax = 10;
    this.proGiftDatas = [];
    this.proGift = [2, 3, 5, 7, 9];
    this.initData();
    this.initPro();
    this.initInfo();
    this.initItems();
  };

  e.prototype.initData = function () {
    var t = _pInfo["default"].ins;
    this.drawedTime = t.getLuckTimes();
    this.nowHaveTime = t.getLuckyState();
    this.crossedLevel = t.getRecordData().main.wTimes;
  };

  e.prototype.initPro = function () {};

  e.prototype.updatePro = function () {};

  e.prototype.initInfo = function () {
    if (this.nowHaveTime) this.btn_start.enabled = !0, this.labTip.node.active = !1;else {
      this.btn_start.enabled = !1;
      this.labTip.node.active = !0;
      var t = 2 - this.crossedLevel % 2;
      this.labTip.string = "(再通过" + t + "关即可抽奖)";
    }
  };

  e.prototype.initItems = function () {
    for (var t = 1; t <= 8; t++) {
      var e = this.giftsDatas[t - 1];
      var o = this.giftsNode.getChildByName("" + t);
      o.getChildByName("light").active = !1;
      o.getChildByName("lab").getComponent(cc.Label).string = e.title;
    }
  };

  e.prototype.getProGift = function () {};

  e.prototype.onBtnStart = function () {
    var t = this;

    if (!this.isCurPlayAni) {
      var e = _com["default"].ins.rad(1, 8);

      this.playAni(e, !0, function () {
        _pInfo["default"].ins.addLuckyTimes();

        t.initData();
        t.addGoodToData(t.giftsDatas[e - 1], t.giftsNode.getChildByName("" + e).getChildByName("spr"));
        t.getProGift();
        t.updatePro(t.drawedTime, t.proMax);
        t.initInfo();
      });
    }
  };

  e.prototype.addGoodToData = function (t, e) {
    switch (t.props) {
      case "notice":
      case "full_row_col":
      case "random_notice":
        _bagMgr["default"].ins.addItem(t.props, t.val);

        break;

      case "times":
        _pInfo["default"].ins.addPower(t.val);

        break;

      case "coin":
        _pInfo["default"].ins.addCoin(t.val);

    }

    var o = e.parent.convertToWorldSpaceAR(e.position);

    _panelMgr["default"].ins.open("ui/ui_flyAni", {
      itemDatas: [{
        itemId: t.props,
        worldPos: o,
        value: t.val
      }]
    });
  };

  e.prototype.playAni = function (t, e, o) {
    var n = this;

    if (!this.isCurPlayAni) {
      if (this.isCurPlayAni = !0, !e) return this.actionIndex(t), this.pointerNode.angle = -this.pointRots[t], void (this.isCurPlayAni = !1);
      var i = t;
      var r = 0;

      var a = function a() {
        if (r += 1, n.actionIndex(r), r > 15) {
          var t = 0;

          var e = function e() {
            t += 1;
            n.actionIndex(t);
            t > i && (n.blingbling(i, function () {
              n.isCurPlayAni = !1;
              o && o();
            }), n.unschedule(e));
          };

          n.unschedule(a);
          n.schedule(e, 0.1);
        }
      };

      this.schedule(a, 0.1);
      this.pointerNode.angle = 0;
      var s = 720 + this.pointRots[t];
      var c = 1.8 + 0.1 * t;
      cc.tween(this.pointerNode).to(c, {
        angle: -s
      }).call(function () {}).start();
    }
  };

  e.prototype.actionIndex = function (t) {
    this.hideAllGiftLight();
    var e = t % 8;
    0 == e && (e = 8);
    this.giftsNode.getChildByName("" + e).getChildByName("light").active = !0;
  };

  e.prototype.blingbling = function (t, e) {
    var o = this;

    if (this.hideAllGiftLight(), t) {
      var n = 0;

      var i = function i() {
        n += 1;
        o.giftsNode.getChildByName("" + t).getChildByName("light").active = n % 2 != 0;
        n > 20 && (o.actionIndex(t), e && e(), o.unschedule(i));
      };

      this.schedule(i, 0.05);
    }
  };

  e.prototype.hideAllGiftLight = function () {
    for (var t = 1; t <= 8; t++) {
      this.giftsNode.getChildByName("" + t).getChildByName("light").active = !1;
    }
  };

  e.prototype.hideThis = function () {
    this.isCurPlayAni || this.hide();
  };

  __decorate([f(cc.Node)], e.prototype, "giftsNode", void 0);

  __decorate([f(cc.Button)], e.prototype, "btn_start", void 0);

  __decorate([f(cc.Node)], e.prototype, "pointerNode", void 0);

  __decorate([f(cc.Label)], e.prototype, "labTip", void 0);

  __decorate([f(cc.Node)], e.prototype, "proGiftNode", void 0);

  return __decorate([h], e);
}(_baseUI["default"]);

exports["default"] = g;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcdWlfbHVja3lHaWZ0LmpzIl0sIm5hbWVzIjpbIm4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9jZmdNZ3IiLCJyZXF1aXJlIiwiX2Jhc2VVSSIsIl9jb20iLCJfcEluZm8iLCJfYmFnTWdyIiwiX3BhbmVsTWdyIiwiZCIsImNjIiwiX2RlY29yYXRvciIsImgiLCJjY2NsYXNzIiwiZiIsInByb3BlcnR5IiwiZyIsInQiLCJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnaWZ0c05vZGUiLCJidG5fc3RhcnQiLCJwb2ludGVyTm9kZSIsImxhYlRpcCIsInByb0dpZnROb2RlIiwiZ2lmdHNEYXRhcyIsImlzQ3VyUGxheUFuaSIsImRyYXdlZFRpbWUiLCJub3dIYXZlVGltZSIsImNyb3NzZWRMZXZlbCIsInByb01heCIsInByb0dpZnQiLCJwcm9HaWZ0RGF0YXMiLCJfX2V4dGVuZHMiLCJwcm90b3R5cGUiLCJzdGFydCIsInNlcnZlckNmZyIsImx1Y2t5X2dpZnQiLCJydWxlcyIsInBvaW50Um90cyIsImluaXREYXRhIiwiaW5pdFBybyIsImluaXRJbmZvIiwiaW5pdEl0ZW1zIiwiaW5zIiwiZ2V0THVja1RpbWVzIiwiZ2V0THVja3lTdGF0ZSIsImdldFJlY29yZERhdGEiLCJtYWluIiwid1RpbWVzIiwidXBkYXRlUHJvIiwiZW5hYmxlZCIsIm5vZGUiLCJhY3RpdmUiLCJzdHJpbmciLCJvIiwiZ2V0Q2hpbGRCeU5hbWUiLCJnZXRDb21wb25lbnQiLCJMYWJlbCIsInRpdGxlIiwiZ2V0UHJvR2lmdCIsIm9uQnRuU3RhcnQiLCJyYWQiLCJwbGF5QW5pIiwiYWRkTHVja3lUaW1lcyIsImFkZEdvb2RUb0RhdGEiLCJwcm9wcyIsImFkZEl0ZW0iLCJ2YWwiLCJhZGRQb3dlciIsImFkZENvaW4iLCJwYXJlbnQiLCJjb252ZXJ0VG9Xb3JsZFNwYWNlQVIiLCJwb3NpdGlvbiIsIm9wZW4iLCJpdGVtRGF0YXMiLCJpdGVtSWQiLCJ3b3JsZFBvcyIsImFjdGlvbkluZGV4IiwiYW5nbGUiLCJpIiwiciIsImEiLCJibGluZ2JsaW5nIiwidW5zY2hlZHVsZSIsInNjaGVkdWxlIiwicyIsImMiLCJ0d2VlbiIsInRvIiwiY2FsbCIsImhpZGVBbGxHaWZ0TGlnaHQiLCJoaWRlVGhpcyIsImhpZGUiLCJfX2RlY29yYXRlIiwiTm9kZSIsIkJ1dHRvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFKO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFBQ0MsS0FBSyxFQUFFLENBQUM7QUFBVCxDQUE3Qzs7QUFDQSxJQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXJCOztBQUNBLElBQUlDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFFBQUQsQ0FBckI7O0FBQ0EsSUFBSUUsSUFBSSxHQUFHRixPQUFPLENBQUMsS0FBRCxDQUFsQjs7QUFDQSxJQUFJRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXBCOztBQUNBLElBQUlJLE9BQU8sR0FBR0osT0FBTyxDQUFDLFFBQUQsQ0FBckI7O0FBQ0EsSUFBSUssU0FBUyxHQUFHTCxPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxJQUFJTSxDQUFDLEdBQUdDLEVBQUUsQ0FBQ0MsVUFBWDtBQUNBLElBQUlDLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxPQUFWO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHTCxDQUFDLENBQUNNLFFBQVY7O0FBQ0EsSUFBSUMsQ0FBQyxHQUFJLFVBQVVDLENBQVYsRUFBYTtFQUNsQixTQUFTQyxDQUFULEdBQWE7SUFDVCxJQUFJQSxDQUFDLEdBQUksU0FBU0QsQ0FBVCxJQUFjQSxDQUFDLENBQUNFLEtBQUYsQ0FBUSxJQUFSLEVBQWNDLFNBQWQsQ0FBZixJQUE0QyxJQUFwRDtJQUNBRixDQUFDLENBQUNHLFNBQUYsR0FBYyxJQUFkO0lBQ0FILENBQUMsQ0FBQ0ks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LENBQWhELENBQVY7O0VBQ0E0RCxVQUFVLENBQUMsQ0FBQ2pGLENBQUMsQ0FBQ0osRUFBRSxDQUFDc0YsSUFBSixDQUFGLENBQUQsRUFBZTlFLENBQUMsQ0FBQ2lCLFNBQWpCLEVBQTRCLGFBQTVCLEVBQTJDLEtBQUssQ0FBaEQsQ0FBVjs7RUFDQTRELFVBQVUsQ0FBQyxDQUFDakYsQ0FBQyxDQUFDSixFQUFFLENBQUNpRCxLQUFKLENBQUYsQ0FBRCxFQUFnQnpDLENBQUMsQ0FBQ2lCLFNBQWxCLEVBQTZCLFFBQTdCLEVBQXVDLEtBQUssQ0FBNUMsQ0FBVjs7RUFDQTRELFVBQVUsQ0FBQyxDQUFDakYsQ0FBQyxDQUFDSixFQUFFLENBQUNzRixJQUFKLENBQUYsQ0FBRCxFQUFlOUUsQ0FBQyxDQUFDaUIsU0FBakIsRUFBNEIsYUFBNUIsRUFBMkMsS0FBSyxDQUFoRCxDQUFWOztFQUNBLE9BQU80RCxVQUFVLENBQUMsQ0FBQ25GLENBQUQsQ0FBRCxFQUFNTSxDQUFOLENBQWpCO0FBQ0gsQ0F6Sk8sQ0F5SkxkLE9BQU8sV0F6SkYsQ0FBUjs7QUEwSkFKLE9BQU8sV0FBUCxHQUFrQmdCLENBQWxCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiAhMH0pO1xudmFyIF9jZmdNZ3IgPSByZXF1aXJlKFwiY2ZnTWdyXCIpO1xudmFyIF9iYXNlVUkgPSByZXF1aXJlKFwiYmFzZVVJXCIpO1xudmFyIF9jb20gPSByZXF1aXJlKFwiY29tXCIpO1xudmFyIF9wSW5mbyA9IHJlcXVpcmUoXCJwSW5mb1wiKTtcbnZhciBfYmFnTWdyID0gcmVxdWlyZShcImJhZ01nclwiKTtcbnZhciBfcGFuZWxNZ3IgPSByZXF1aXJlKFwicGFuZWxNZ3JcIik7XG52YXIgZCA9IGNjLl9kZWNvcmF0b3I7XG52YXIgaCA9IGQuY2NjbGFzcztcbnZhciBmID0gZC5wcm9wZXJ0eTtcbnZhciBnID0gKGZ1bmN0aW9uICh0KSB7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgdmFyIGUgPSAobnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XG4gICAgICAgIGUuZ2lmdHNOb2RlID0gbnVsbDtcbiAgICAgICAgZS5idG5fc3RhcnQgPSBudWxsO1xuICAgICAgICBlLnBvaW50ZXJOb2RlID0gbnVsbDtcbiAgICAgICAgZS5sYWJUaXAgPSBudWxsO1xuICAgICAgICBlLnByb0dpZnROb2RlID0gbnVsbDtcbiAgICAgICAgZS5naWZ0c0RhdGFzID0gbnVsbDtcbiAgICAgICAgZS5pc0N1clBsYXlBbmkgPSAhMTtcbiAgICAgICAgZS5kcmF3ZWRUaW1lID0gMDtcbiAgICAgICAgZS5ub3dIYXZlVGltZSA9ICExO1xuICAgICAgICBlLmNyb3NzZWRMZXZlbCA9IDA7XG4gICAgICAgIGUucHJvTWF4ID0gMTA7XG4gICAgICAgIGUucHJvR2lmdCA9IG51bGw7XG4gICAgICAgIGUucHJvR2lmdERhdGFzID0gW107XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBfX2V4dGVuZHMoZSwgdCk7XG4gICAgZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZ2lmdHNEYXRhcyA9IF9jZmdNZ3IuZGVmYXVsdC5zZXJ2ZXJDZmcubHVja3lfZ2lmdC5ydWxlcztcbiAgICAgICAgdGhpcy5wb2ludFJvdHMgPSBbMCwgMjIsIDY3LCAxMTIsIDE1NywgMjAyLCAyNDcsIDI5MiwgMzM3XTtcbiAgICAgICAgdGhpcy5pc0N1clBsYXlBbmkgPSAhMTtcbiAgICAgICAgdGhpcy5wcm9NYXggPSAxMDtcbiAgICAgICAgdGhpcy5wcm9HaWZ0RGF0YXMgPSBbXTtcbiAgICAgICAgdGhpcy5wcm9HaWZ0ID0gWzIsIDMsIDUsIDcsIDldO1xuICAgICAgICB0aGlzLmluaXREYXRhKCk7XG4gICAgICAgIHRoaXMuaW5pdFBybygpO1xuICAgICAgICB0aGlzLmluaXRJbmZvKCk7XG4gICAgICAgIHRoaXMuaW5pdEl0ZW1zKCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5pbml0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQgPSBfcEluZm8uZGVmYXVsdC5pbnM7XG4gICAgICAgIHRoaXMuZHJhd2VkVGltZSA9IHQuZ2V0THVja1RpbWVzKCk7XG4gICAgICAgIHRoaXMubm93SGF2ZVRpbWUgPSB0LmdldEx1Y2t5U3RhdGUoKTtcbiAgICAgICAgdGhpcy5jcm9zc2VkTGV2ZWwgPSB0LmdldFJlY29yZERhdGEoKS5tYWluLndUaW1lcztcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmluaXRQcm8gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBlLnByb3RvdHlwZS51cGRhdGVQcm8gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBlLnByb3RvdHlwZS5pbml0SW5mbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubm93SGF2ZVRpbWUpICh0aGlzLmJ0bl9zdGFydC5lbmFibGVkID0gITApLCAodGhpcy5sYWJUaXAubm9kZS5hY3RpdmUgPSAhMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idG5fc3RhcnQuZW5hYmxlZCA9ICExO1xuICAgICAgICAgICAgdGhpcy5sYWJUaXAubm9kZS5hY3RpdmUgPSAhMDtcbiAgICAgICAgICAgIHZhciB0ID0gMiAtICh0aGlzLmNyb3NzZWRMZXZlbCAlIDIpO1xuICAgICAgICAgICAgdGhpcy5sYWJUaXAuc3RyaW5nID0gXCIo5YaN6YCa6L+HXCIgKyB0ICsgXCLlhbPljbPlj6/mir3lpZYpXCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmluaXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IDE7IHQgPD0gODsgdCsrKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuZ2lmdHNEYXRhc1t0IC0gMV07XG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMuZ2lmdHNOb2RlLmdldENoaWxkQnlOYW1lKFwiXCIgKyB0KTtcbiAgICAgICAgICAgIG8uZ2V0Q2hpbGRCeU5hbWUoXCJsaWdodFwiKS5hY3RpdmUgPSAhMTtcbiAgICAgICAgICAgIG8uZ2V0Q2hpbGRCeU5hbWUoXCJsYWJcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBlLnRpdGxlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5nZXRQcm9HaWZ0ID0gZnVuY3Rpb24gKCkge307XG4gICAgZS5wcm90b3R5cGUub25CdG5TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuaXNDdXJQbGF5QW5pKSB7XG4gICAgICAgICAgICB2YXIgZSA9IF9jb20uZGVmYXVsdC5pbnMucmFkKDEsIDgpO1xuICAgICAgICAgICAgdGhpcy5wbGF5QW5pKGUsICEwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3BJbmZvLmRlZmF1bHQuaW5zLmFkZEx1Y2t5VGltZXMoKTtcbiAgICAgICAgICAgICAgICB0LmluaXREYXRhKCk7XG4gICAgICAgICAgICAgICAgdC5hZGRHb29kVG9EYXRhKHQuZ2lmdHNEYXRhc1tlIC0gMV0sIHQuZ2lmdHNOb2RlLmdldENoaWxkQnlOYW1lKFwiXCIgKyBlKS5nZXRDaGlsZEJ5TmFtZShcInNwclwiKSk7XG4gICAgICAgICAgICAgICAgdC5nZXRQcm9HaWZ0KCk7XG4gICAgICAgICAgICAgICAgdC51cGRhdGVQcm8odC5kcmF3ZWRUaW1lLCB0LnByb01heCk7XG4gICAgICAgICAgICAgICAgdC5pbml0SW5mbygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmFkZEdvb2RUb0RhdGEgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICBzd2l0Y2ggKHQucHJvcHMpIHtcbiAgICAgICAgICAgIGNhc2UgXCJub3RpY2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJmdWxsX3Jvd19jb2xcIjpcbiAgICAgICAgICAgIGNhc2UgXCJyYW5kb21fbm90aWNlXCI6XG4gICAgICAgICAgICAgICAgX2JhZ01nci5kZWZhdWx0Lmlucy5hZGRJdGVtKHQucHJvcHMsIHQudmFsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ0aW1lc1wiOlxuICAgICAgICAgICAgICAgIF9wSW5mby5kZWZhdWx0Lmlucy5hZGRQb3dlcih0LnZhbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29pblwiOlxuICAgICAgICAgICAgICAgIF9wSW5mby5kZWZhdWx0Lmlucy5hZGRDb2luKHQudmFsKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbyA9IGUucGFyZW50LmNvbnZlcnRUb1dvcmxkU3BhY2VBUihlLnBvc2l0aW9uKTtcbiAgICAgICAgX3BhbmVsTWdyLmRlZmF1bHQuaW5zLm9wZW4oXCJ1aS91aV9mbHlBbmlcIiwge2l0ZW1EYXRhczogW3tpdGVtSWQ6IHQucHJvcHMsIHdvcmxkUG9zOiBvLCB2YWx1ZTogdC52YWx9XX0pO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUucGxheUFuaSA9IGZ1bmN0aW9uICh0LCBlLCBvKSB7XG4gICAgICAgIHZhciBuID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLmlzQ3VyUGxheUFuaSkge1xuICAgICAgICAgICAgaWYgKCgodGhpcy5pc0N1clBsYXlBbmkgPSAhMCksICFlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbkluZGV4KHQpLCAodGhpcy5wb2ludGVyTm9kZS5hbmdsZSA9IC10aGlzLnBvaW50Um90c1t0XSksIHZvaWQgKHRoaXMuaXNDdXJQbGF5QW5pID0gITEpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHZhciBpID0gdDtcbiAgICAgICAgICAgIHZhciByID0gMDtcbiAgICAgICAgICAgIHZhciBhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICgoKHIgKz0gMSksIG4uYWN0aW9uSW5kZXgociksIHIgPiAxNSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uYWN0aW9uSW5kZXgodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID4gaSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuLmJsaW5nYmxpbmcoaSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmlzQ3VyUGxheUFuaSA9ICExO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvICYmIG8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnVuc2NoZWR1bGUoZSkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBuLnVuc2NoZWR1bGUoYSk7XG4gICAgICAgICAgICAgICAgICAgIG4uc2NoZWR1bGUoZSwgMC4xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZShhLCAwLjEpO1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyTm9kZS5hbmdsZSA9IDA7XG4gICAgICAgICAgICB2YXIgcyA9IDcyMCArIHRoaXMucG9pbnRSb3RzW3RdO1xuICAgICAgICAgICAgdmFyIGMgPSAxLjggKyAwLjEgKiB0O1xuICAgICAgICAgICAgY2MudHdlZW4odGhpcy5wb2ludGVyTm9kZSlcbiAgICAgICAgICAgICAgICAudG8oYywge2FuZ2xlOiAtc30pXG4gICAgICAgICAgICAgICAgLmNhbGwoZnVuY3Rpb24gKCkge30pXG4gICAgICAgICAgICAgICAgLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmFjdGlvbkluZGV4ID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdGhpcy5oaWRlQWxsR2lmdExpZ2h0KCk7XG4gICAgICAgIHZhciBlID0gdCAlIDg7XG4gICAgICAgIDAgPT0gZSAmJiAoZSA9IDgpO1xuICAgICAgICB0aGlzLmdpZnRzTm9kZS5nZXRDaGlsZEJ5TmFtZShcIlwiICsgZSkuZ2V0Q2hpbGRCeU5hbWUoXCJsaWdodFwiKS5hY3RpdmUgPSAhMDtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmJsaW5nYmxpbmcgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIGlmICgodGhpcy5oaWRlQWxsR2lmdExpZ2h0KCksIHQpKSB7XG4gICAgICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgICAgICB2YXIgaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBuICs9IDE7XG4gICAgICAgICAgICAgICAgby5naWZ0c05vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJcIiArIHQpLmdldENoaWxkQnlOYW1lKFwibGlnaHRcIikuYWN0aXZlID0gbiAlIDIgIT0gMDtcbiAgICAgICAgICAgICAgICBuID4gMjAgJiYgKG8uYWN0aW9uSW5kZXgodCksIGUgJiYgZSgpLCBvLnVuc2NoZWR1bGUoaSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUoaSwgMC4wNSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmhpZGVBbGxHaWZ0TGlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIHQgPSAxOyB0IDw9IDg7IHQrKykgdGhpcy5naWZ0c05vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJcIiArIHQpLmdldENoaWxkQnlOYW1lKFwibGlnaHRcIikuYWN0aXZlID0gITE7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5oaWRlVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0N1clBsYXlBbmkgfHwgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtmKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiZ2lmdHNOb2RlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbZihjYy5CdXR0b24pXSwgZS5wcm90b3R5cGUsIFwiYnRuX3N0YXJ0XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbZihjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcInBvaW50ZXJOb2RlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbZihjYy5MYWJlbCldLCBlLnByb3RvdHlwZSwgXCJsYWJUaXBcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtmKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwicHJvR2lmdE5vZGVcIiwgdm9pZCAwKTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZShbaF0sIGUpO1xufSkoX2Jhc2VVSS5kZWZhdWx0KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGc7XG4iXX0=