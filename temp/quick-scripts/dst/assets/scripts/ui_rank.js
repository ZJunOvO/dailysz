
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/ui_rank.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '26842+g3mFAKqs5eUSbH3PX', 'ui_rank');
// scripts/ui_rank.js

"use strict";

var n;
Object.defineProperty(exports, "__esModule", {
  value: !0
});
var a;
var s;

var _idx = require("idx");

var _mySafeArea = require("mySafeArea");

var _request = require("request");

var _res = require("res");

var _time = require("time");

var _uData = require("uData");

var _lang = require("lang");

var _global = require("global");

var _rankMgr = require("rankMgr");

var _tipMgr = require("tipMgr");

var _pInfo = require("pInfo");

var _baseUI = require("baseUI");

var _rankItem = require("rankItem");

var w = cc._decorator;
var S = w.ccclass;
var T = w.property;

(function (t) {
  t[t.mian = 0] = "mian", t[t.daily = 1] = "daily", t[t.race = 2] = "race";
})(a || (a = {}));

(function (t) {
  t[t.score = 0] = "score";
  t[t.win = 1] = "win";
})(s || (s = {}));

var I = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.scrollView = null;
    e.dataTagBtnsSps = [];
    e.levelTagBtnsSps = [];
    e.dayTypeBtnsSps = [];
    e.viewItem = null;
    e.rankTop = [];
    e.myRank = null;
    e.topNode = null;
    e.loadingNode = null;
    e.closeNode = null;
    e.bgSpr = null;
    e.type = _rankMgr.rankType.Total;
    e.tag = _rankMgr.rankTag.mainScore;
    e.levelTag = a.mian;
    e.dataTag = s.score;
    e.last_view_inner_y = -1;
    e.THEME_H = 122;
    e.top_offest = 61;
    e.itemCount = 0;
    e.items = [];
    e.rankData = [];
    e.playAni = !0;
    return e;
  }

  __extends(e, t);

  e.prototype.onLoad = function () {
    if (this.node.height = cc.winSize.height, _global["default"].padScale) {
      this.bgSpr.node.scale = _global["default"].padScale;
      var t = (cc.view.getVisibleSize().width - 720) / 2;
      this.closeNode.x -= t;
    }

    var e = this.node.height - 1280;
    this.scrollView.node.height += e;
    this.scrollView.node.getChildByName("view").height += e;
    this.scrollView.vertical = !1;
    var o = _time["default"].ins.serverTime || Math.floor(new Date().getTime() / 1e3);

    if (o - _pInfo["default"].ins.getRankLastTimeData() >= 3600) {
      _pInfo["default"].ins.setRankLastTimeData(o);

      var n = _idx.platform.getUserInfo();

      var i = this.myRank.getComponent(_rankItem["default"]);
      n ? n.then(function (t) {
        _request["default"].ins.updateUserInfo(t);

        i.setHeadSp(_uData["default"].ins.getHeadImg());
      }, function () {
        i.setDefaultHead();
      }) : i.setDefaultHead();
    }
  };

  e.prototype.start = function () {
    var t = this;
    this.scheduleOnce(function () {
      var e = _mySafeArea.getSafeAreaRect().yMin;

      t.topNode.y -= e;
      t.scrollView.node.y -= e / 2;
      t.scrollView.node.getChildByName("view").height -= e;
      t.scrollView.content.y -= e / 2;
      t.scrollView.node.on("scrolling", function () {
        t.RefreshThemesVisible();
      }, t);
      t.loadingNode.position = t.scrollView.node.position;
      t.initData();

      _rankMgr["default"].ins.uploadRankData();
    });
  };

  e.prototype.initData = function () {
    this.refreshData();
  };

  e.prototype.refreshData = function () {
    this.levelTag === a.mian ? this.dataTag === s.score ? this.tag = _rankMgr.rankTag.mainScore : this.tag = _rankMgr.rankTag.mainWin : this.levelTag === a.daily && (this.dataTag === s.score ? this.tag = _rankMgr.rankTag.dailyScore : this.tag = _rankMgr.rankTag.dailyWin);
    this.getRankdata();
  };

  e.prototype.getRankdata = function () {
    var t = this;

    _rankMgr["default"].ins.getRankDataByType(this.tag, this.type).then(function (e) {
      t.dealData(e.data);
    }, function () {
      t.dealData([]);
    });
  };

  e.prototype.dealData = function (t) {
    this.node && (this.loadingNode.active = !1);
    var e = !1;
    var o = [];
    var n = _rankMgr["default"].ins.getMyRankDataByTag(this.tag, this.type) || 0;
    if (t) for (var i in o = o.concat(t)) {
      if ((r = o[i]).game_uid == _uData["default"].ins.getUid()) {
        r.nickname = _uData["default"].ins.getName();
        r.sort_value = n;
        r.game_uid = _uData["default"].ins.getUid();
        r.avatar = _uData["default"].ins.getHeadImg();
        e = !0;
        break;
      }
    }

    if (!e) {
      var r = {
        nickname: _uData["default"].ins.getName(),
        sort_value: n,
        game_uid: _uData["default"].ins.getUid(),
        avatar: _uData["default"].ins.getHeadImg()
      };
      o.push(r);
    }

    o.sort(function (t, e) {
      return e.sort_value - t.sort_value;
    });
    this.rankData = o;
    this.refreshPanel();
  };

  e.prototype.refreshPanel = function () {
    this.setMySelf();
    this.itemCount = 97;
    var t = this.THEME_H * this.itemCount + this.top_offest;
    this.scrollView.content.setContentSize(cc.size(cc.winSize.width, t));
    this.last_view_inner_y = -1;
    this.scrollView.stopAutoScroll();
    this.scrollView.scrollToTop();

    for (var e = 0; e < 3; e++) {
      var o = this.rankData[e];
      var n = this.rankTop[e];
      this.setRankTop(n, o);
    }

    this.RefreshThemesVisible();
  };

  e.prototype.RefreshThemesVisible = function (t) {
    var e = this;
    void 0 === t && (t = 0);
    var o = this.scrollView.getContentPosition();

    if (!(Math.abs(this.last_view_inner_y - o.y) < 0.01)) {
      this.last_view_inner_y = o.y;

      for (var n, i, r, a, s, c, l = function l() {
        n = -d * u.THEME_H - u.top_offest;
        i = u.scrollView.content.convertToWorldSpaceAR(cc.v2(0, n));
        r = u.node.convertToNodeSpaceAR(i);
        a = r.y < -p || r.y + u.THEME_H > p;
        s = d;
        var t = d + 3;
        var o = u.rankData[t];
        if (a) u.items[s] && (u.items[s].active = !1);else if (u.items[s]) {
          u.setItemInfo(u.items[s], t, o);
          var l = u.playAni;
          if (l) return u.items[s].x = 0, u.items[s].opacity = 0, u.scheduleOnce(function () {
            e.items[s].active = !0;
            e.last_view_inner_y = -1;
            e.RefreshThemesVisible(d + 1);
            l && e.showChgAni(e.items[s]);
          }, 0.06), "break";
          u.items[s].x = 0;
          u.items[s].opacity = 255;
          u.items[s].active = !0;
        } else {
          (c = cc.instantiate(u.viewItem)).active = !0;
          c.position = cc.v3(0, -d * u.THEME_H - u.top_offest);
          c.parent = u.scrollView.content;
          u.items[s] = c;
          u.setItemInfo(c, t, o);
          var h = u.playAni;
          if (h) return c.x = (cc.winSize.width + u.items[s].width) / 2, c.opacity = 255, u.scheduleOnce(function () {
            e.last_view_inner_y = -1;
            e.RefreshThemesVisible(d + 1);
            h && e.showLoadAni(c);
          }, 0.02), "break";
          c.opacity = 255;
          c.x = 0;
        }
        u.playAni = !1;
        d === u.itemCount - 1 && u.scheduleOnce(function () {
          e.scrollView.vertical = !0;
        }, 0.5);
      }, u = this, p = this.scrollView.node.height / 4 * 3, d = t; d < this.itemCount && "break" !== l(); d++) {
        ;
      }
    }
  };

  e.prototype.setRankTop = function (t, e) {
    var o = t.getComponent(_rankItem["default"]);
    e ? (o.setRankData(e), o.setGameUid(e.game_uid), o.setScore(e.sort_value), e.game_uid == _uData["default"].ins.getUid() ? (o.setSkin(_pInfo["default"].ins.getUsingSkin(), !1, !0), o.setNickName(_uData["default"].ins.getName()), o.setHeadSp(_uData["default"].ins.getHeadImg())) : (o.setSkin(null == e ? void 0 : e.uSkin, !1, !0), o.setNickName(e.nickname), e.avatar ? o.setHeadSp(e.avatar) : o.setDefaultHead())) : (o.setNickName("暂无"), o.setScore("0"), o.setDefaultHead());
  };

  e.prototype.setItemInfo = function (t, e, o, n) {
    void 0 === n && (n = !1);
    var i = t.getComponent(_rankItem["default"]);
    i.setIdx(Number(e) + 1 + "");
    o ? (i.setRankData(o), i.setGameUid(o.game_uid), i.setScore(o.sort_value), o.game_uid == _uData["default"].ins.getUid() ? (i.setSkin(_pInfo["default"].ins.getUsingSkin(), n), i.setNickName(_uData["default"].ins.getName()), i.setHeadSp(_uData["default"].ins.getHeadImg())) : (i.setSkin(null == o ? void 0 : o.uSkin), i.setNickName(o.nickname), o.avatar ? i.setHeadSp(o.avatar) : i.setDefaultHead())) : (i.setNickName("暂无"), i.setScore("0"), i.setDefaultHead());
  };

  e.prototype.setMySelf = function () {
    var t = this.rankData;

    for (var e in t) {
      var o = t[e];
      if (o.game_uid == _uData["default"].ins.getUid() && Number(e) < 100) return void this.setItemInfo(this.myRank, e, o, !0);
    }

    var n = _rankMgr["default"].ins.getMyRankDataByTag(this.tag, this.type);

    var i = this.myRank.getComponent(_rankItem["default"]);
    i.setSkin(_pInfo["default"].ins.getUsingSkin(), !0);
    i.setGameUid(_uData["default"].ins.getUid().toString());
    i.setIdx("99+");
    i.setNickName(_uData["default"].ins.getName());
    i.setScore(n + "");
    _uData["default"].ins.getHeadImg() ? i.setHeadSp(_uData["default"].ins.getHeadImg()) : i.setDefaultHead();
  };

  e.prototype.setHeadOnLine = function (t, e) {
    var o = this;
    cc.assetManager.loadRemote(e, function (e, n) {
      !e && o.node && o.node.isValid && (t.spriteFrame = new cc.SpriteFrame(n));
    });
  };

  e.prototype.setDefaultHead = function (t) {
    var e = this;

    _res["default"].ins.getBundleByString("resSps").then(function (o) {
      o.load("common/head_1", cc.SpriteFrame, function (o, n) {
        !o && e.node && e.node.isValid && (t.spriteFrame = n);
      });
    })["catch"](function (t) {
      console.error("RTool.ins.getBundleByString('resSps')", t);
    });
  };

  e.prototype.showLoadAni = function (t) {
    cc.tween(t).to(0.5, {
      x: 0
    }, {
      easing: "backInOut"
    }).start();
  };

  e.prototype.showChgAni = function (t) {
    cc.tween(t).to(0.5, {
      opacity: 255
    }).start();
  };

  e.prototype.onBtnChgDayType = function () {
    this.initAni();
    this.type == _rankMgr.rankType.Total ? (this.type = _rankMgr.rankType.Today, this.refreshData(), this.dayTypeBtnsSps[0].active = !1, this.dayTypeBtnsSps[1].active = !0) : this.type == _rankMgr.rankType.Today && (this.type = _rankMgr.rankType.Total, this.refreshData(), this.dayTypeBtnsSps[0].active = !0, this.dayTypeBtnsSps[1].active = !1);
  };

  e.prototype.onBtnMain = function () {
    this.levelTag !== a.mian && (this.initAni(), this.levelTag = a.mian, this.refreshData(), this.chgLevelTagBtns(!0));
  };

  e.prototype.onBtnDaily = function () {
    _tipMgr["default"].ins.showTip(_lang.lang[10004]);
  };

  e.prototype.chgLevelTagBtns = function (t) {
    this.levelTagBtnsSps[0].active = t;
    this.levelTagBtnsSps[1].active = !t;
    this.levelTagBtnsSps[2].active = !t;
    this.levelTagBtnsSps[3].active = t;
  };

  e.prototype.onBtnChgDataType = function () {
    this.initAni();
    this.dataTag == s.score ? (this.dataTag = s.win, this.refreshData(), this.dataTagBtnsSps[0].active = !1, this.dataTagBtnsSps[1].active = !0) : this.dataTag == s.win && (this.dataTag = s.score, this.refreshData(), this.dataTagBtnsSps[0].active = !0, this.dataTagBtnsSps[1].active = !1);
  };

  e.prototype.initAni = function () {
    this.unscheduleAllCallbacks();

    for (var t = 0, e = this.items.length; t < e; t++) {
      var o = this.items[t];
      cc.Tween.stopAllByTarget(o);
      o && (o.opacity = 0);
    }

    this.scrollView.stopAutoScroll();
    this.scrollView.scrollToTop();
    this.scrollView.vertical = !1;
    this.playAni = !0;
  };

  e.prototype.hideThis = function () {
    this.hide();
  };

  e.prototype.onDestroy = function () {
    cc.assetManager.releaseAsset(this.bgSpr.spriteFrame);
  };

  __decorate([T(cc.ScrollView)], e.prototype, "scrollView", void 0);

  __decorate([T([cc.Node])], e.prototype, "dataTagBtnsSps", void 0);

  __decorate([T([cc.Node])], e.prototype, "levelTagBtnsSps", void 0);

  __decorate([T([cc.Node])], e.prototype, "dayTypeBtnsSps", void 0);

  __decorate([T(cc.Node)], e.prototype, "viewItem", void 0);

  __decorate([T([cc.Node])], e.prototype, "rankTop", void 0);

  __decorate([T(cc.Node)], e.prototype, "myRank", void 0);

  __decorate([T(cc.Node)], e.prototype, "topNode", void 0);

  __decorate([T(cc.Node)], e.prototype, "loadingNode", void 0);

  __decorate([T(cc.Node)], e.prototype, "closeNode", void 0);

  __decorate([T(cc.Sprite)], e.prototype, "bgSpr", void 0);

  return __decorate([S], e);
}(_baseUI["default"]);

exports["default"] = I;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcdWlfcmFuay5qcyJdLCJuYW1lcyI6WyJuIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhIiwicyIsIl9pZHgiLCJyZXF1aXJlIiwiX215U2FmZUFyZWEiLCJfcmVxdWVzdCIsIl9yZXMiLCJfdGltZSIsIl91RGF0YSIsIl9sYW5nIiwiX2dsb2JhbCIsIl9yYW5rTWdyIiwiX3RpcE1nciIsIl9wSW5mbyIsIl9iYXNlVUkiLCJfcmFua0l0ZW0iLCJ3IiwiY2MiLCJfZGVjb3JhdG9yIiwiUyIsImNjY2xhc3MiLCJUIiwicHJvcGVydHkiLCJ0IiwibWlhbiIsImRhaWx5IiwicmFjZSIsInNjb3JlIiwid2luIiwiSSIsImUiLCJhcHBseSIsImFyZ3VtZW50cyIsInNjcm9sbFZpZXciLCJkYXRhVGFnQnRuc1NwcyIsImxldmVsVGFnQnRuc1NwcyIsImRheVR5cGVCdG5zU3BzIiwidmlld0l0ZW0iLCJyYW5rVG9wIiwibXlSYW5rIiwidG9wTm9kZSIsImxvYWRpbmdOb2RlIiwiY2xvc2VOb2RlIiwiYmdTcHIiLCJ0eXBlIiwicmFua1R5cGUiLCJUb3RhbCIsInRhZyIsInJhbmtUYWciLCJtYWluU2NvcmUiLCJsZXZlbFRhZyIsImRhdGFUYWciLCJsYXN0X3ZpZXdfaW5uZXJfeSIsIlRIRU1FX0giLCJ0b3Bfb2ZmZXN0IiwiaXRlbUNvdW50IiwiaXRlbXMiLCJyYW5rRGF0YSIsInBsYXlBbmkiLCJfX2V4dGVuZHMiLCJwcm90b3R5cGUiLCJvbkxvYWQiLCJub2RlIiwiaGVpZ2h0Iiwid2luU2l6ZSIsInBhZFNjYWxlIiwic2NhbGUiLCJ2aWV3IiwiZ2V0VmlzaWJsZVNpemUiLCJ3aWR0aCIsIngiLCJnZXRDaGlsZEJ5TmFtZSIsInZlcnRpY2FsIiwibyIsImlucyIsInNlcnZlclRpbWUiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwiZ2V0VGltZSIsImdldFJhbmtMYXN0VGltZURhdGEiLCJzZXRSYW5rTGFzdFRpbWVEYXRhIiwicGxhdGZvcm0iLCJnZXRVc2VySW5mbyIsImkiLCJnZXRDb21wb25lbnQiLCJ0aGVuIiwidXBkYXRlVXNlckluZm8iLCJzZXRIZWFkU3AiLCJnZXRIZWFkSW1nIiwic2V0RGVmYXVsdEhlYWQiLCJzdGFydCIsInNjaGVkdWxlT25jZSIsImdldFNhZmVBcmVhUmVjdCIsInlNaW4iLCJ5IiwiY29udGVudCIsIm9uIiwiUmVmcmVzaFRoZW1lc1Zpc2libGUiLCJwb3NpdGlvbiIsImluaXREYXRhIiwidXBsb2FkUmFua0RhdGEiLCJyZWZyZXNoRGF0YSIsIm1haW5XaW4iLCJkYWlseVNjb3JlIiwiZGFpbHlXaW4iLCJnZXRSYW5rZGF0YSIsImdldFJhbmtEYXRhQnlUeXBlIiwiZGVhbERhdGEiLCJkYXRhIiwiYWN0aXZlIiwiZ2V0TXlSYW5rRGF0YUJ5VGFnIiwiY29uY2F0IiwiciIsImdhbWVfdWlkIiwiZ2V0VWlkIiwibmlja25hbWUiLCJnZXROYW1lIiwic29ydF92YWx1ZSIsImF2YXRhciIsInB1c2giLCJzb3J0IiwicmVmcmVzaFBhbmVsIiwic2V0TXlTZWxmIiwic2V0Q29udGVudFNpemUiLCJzaXplIiwic3RvcEF1dG9TY3JvbGwiLCJzY3JvbGxUb1RvcCIsInNldFJhbmtUb3AiLCJnZXRDb250ZW50UG9zaXRpb24iLCJhYnMiLCJjIiwibCIsImQiLCJ1IiwiY29udmVydFRvV29ybGRTcGFjZUFSIiwidjIiLCJjb252ZXJ0VG9Ob2RlU3BhY2VBUiIsInAiLCJzZXRJdGVtSW5mbyIsIm9wYWNpdHkiLCJzaG93Q2hnQW5pIiwiaW5zdGFudGlhdGUiLCJ2MyIsInBhcmVudCIsImgiLCJzaG93TG9hZEFuaSIsInNldFJhbmtEYXRhIiwic2V0R2FtZVVpZCIsInNldFNjb3JlIiwic2V0U2tpbiIsImdldFVzaW5nU2tpbiIsInNldE5pY2tOYW1lIiwidVNraW4iLCJzZXRJZHgiLCJOdW1iZXIiLCJ0b1N0cmluZyIsInNldEhlYWRPbkxpbmUiLCJhc3NldE1hbmFnZXIiLCJsb2FkUmVtb3RlIiwiaXNWYWxpZCIsInNwcml0ZUZyYW1lIiwiU3ByaXRlRnJhbWUiLCJnZXRCdW5kbGVCeVN0cmluZyIsImxvYWQiLCJjb25zb2xlIiwiZXJyb3IiLCJ0d2VlbiIsInRvIiwiZWFzaW5nIiwib25CdG5DaGdEYXlUeXBlIiwiaW5pdEFuaSIsIlRvZGF5Iiwib25CdG5NYWluIiwiY2hnTGV2ZWxUYWdCdG5zIiwib25CdG5EYWlseSIsInNob3dUaXAiLCJsYW5nIiwib25CdG5DaGdEYXRhVHlwZSIsInVuc2NoZWR1bGVBbGxDYWxsYmFja3MiLCJsZW5ndGgiLCJUd2VlbiIsInN0b3BBbGxCeVRhcmdldCIsImhpZGVUaGlzIiwiaGlkZSIsIm9uRGVzdHJveSIsInJlbGVhc2VBc3NldCIsIl9fZGVjb3JhdGUiLCJTY3JvbGxWaWV3IiwiTm9kZSIsIlNwcml0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFKO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFBQ0MsS0FBSyxFQUFFLENBQUM7QUFBVCxDQUE3QztBQUNBLElBQUlDLENBQUo7QUFDQSxJQUFJQyxDQUFKOztBQUNBLElBQUlDLElBQUksR0FBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBbEI7O0FBQ0EsSUFBSUMsV0FBVyxHQUFHRCxPQUFPLENBQUMsWUFBRCxDQUF6Qjs7QUFDQSxJQUFJRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXRCOztBQUNBLElBQUlHLElBQUksR0FBR0gsT0FBTyxDQUFDLEtBQUQsQ0FBbEI7O0FBQ0EsSUFBSUksS0FBSyxHQUFHSixPQUFPLENBQUMsTUFBRCxDQUFuQjs7QUFDQSxJQUFJSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxPQUFELENBQXBCOztBQUNBLElBQUlNLEtBQUssR0FBR04sT0FBTyxDQUFDLE1BQUQsQ0FBbkI7O0FBQ0EsSUFBSU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsUUFBRCxDQUFyQjs7QUFDQSxJQUFJ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LENBQUMsQ0FBQzhCLFNBQWpCLEVBQTRCLFdBQTVCLEVBQXlDLEtBQUssQ0FBOUMsQ0FBVjs7RUFDQStILFVBQVUsQ0FBQyxDQUFDdEssQ0FBQyxDQUFDSixFQUFFLENBQUM2SyxNQUFKLENBQUYsQ0FBRCxFQUFpQmhLLENBQUMsQ0FBQzhCLFNBQW5CLEVBQThCLE9BQTlCLEVBQXVDLEtBQUssQ0FBNUMsQ0FBVjs7RUFDQSxPQUFPK0gsVUFBVSxDQUFDLENBQUN4SyxDQUFELENBQUQsRUFBTVcsQ0FBTixDQUFqQjtBQUNILENBM1dPLENBMldMaEIsT0FBTyxXQTNXRixDQUFSOztBQTRXQWhCLE9BQU8sV0FBUCxHQUFrQitCLENBQWxCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiAhMH0pO1xudmFyIGE7XG52YXIgcztcbnZhciBfaWR4ID0gcmVxdWlyZShcImlkeFwiKTtcbnZhciBfbXlTYWZlQXJlYSA9IHJlcXVpcmUoXCJteVNhZmVBcmVhXCIpO1xudmFyIF9yZXF1ZXN0ID0gcmVxdWlyZShcInJlcXVlc3RcIik7XG52YXIgX3JlcyA9IHJlcXVpcmUoXCJyZXNcIik7XG52YXIgX3RpbWUgPSByZXF1aXJlKFwidGltZVwiKTtcbnZhciBfdURhdGEgPSByZXF1aXJlKFwidURhdGFcIik7XG52YXIgX2xhbmcgPSByZXF1aXJlKFwibGFuZ1wiKTtcbnZhciBfZ2xvYmFsID0gcmVxdWlyZShcImdsb2JhbFwiKTtcbnZhciBfcmFua01nciA9IHJlcXVpcmUoXCJyYW5rTWdyXCIpO1xudmFyIF90aXBNZ3IgPSByZXF1aXJlKFwidGlwTWdyXCIpO1xudmFyIF9wSW5mbyA9IHJlcXVpcmUoXCJwSW5mb1wiKTtcbnZhciBfYmFzZVVJID0gcmVxdWlyZShcImJhc2VVSVwiKTtcbnZhciBfcmFua0l0ZW0gPSByZXF1aXJlKFwicmFua0l0ZW1cIik7XG52YXIgdyA9IGNjLl9kZWNvcmF0b3I7XG52YXIgUyA9IHcuY2NjbGFzcztcbnZhciBUID0gdy5wcm9wZXJ0eTtcbihmdW5jdGlvbiAodCkge1xuICAgICh0Wyh0Lm1pYW4gPSAwKV0gPSBcIm1pYW5cIiksICh0Wyh0LmRhaWx5ID0gMSldID0gXCJkYWlseVwiKSwgKHRbKHQucmFjZSA9IDIpXSA9IFwicmFjZVwiKTtcbn0pKGEgfHwgKGEgPSB7fSkpO1xuKGZ1bmN0aW9uICh0KSB7XG4gICAgdFsodC5zY29yZSA9IDApXSA9IFwic2NvcmVcIjtcbiAgICB0Wyh0LndpbiA9IDEpXSA9IFwid2luXCI7XG59KShzIHx8IChzID0ge30pKTtcbnZhciBJID0gKGZ1bmN0aW9uICh0KSB7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgdmFyIGUgPSAobnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XG4gICAgICAgIGUuc2Nyb2xsVmlldyA9IG51bGw7XG4gICAgICAgIGUuZGF0YVRhZ0J0bnNTcHMgPSBbXTtcbiAgICAgICAgZS5sZXZlbFRhZ0J0bnNTcHMgPSBbXTtcbiAgICAgICAgZS5kYXlUeXBlQnRuc1NwcyA9IFtdO1xuICAgICAgICBlLnZpZXdJdGVtID0gbnVsbDtcbiAgICAgICAgZS5yYW5rVG9wID0gW107XG4gICAgICAgIGUubXlSYW5rID0gbnVsbDtcbiAgICAgICAgZS50b3BOb2RlID0gbnVsbDtcbiAgICAgICAgZS5sb2FkaW5nTm9kZSA9IG51bGw7XG4gICAgICAgIGUuY2xvc2VOb2RlID0gbnVsbDtcbiAgICAgICAgZS5iZ1NwciA9IG51bGw7XG4gICAgICAgIGUudHlwZSA9IF9yYW5rTWdyLnJhbmtUeXBlLlRvdGFsO1xuICAgICAgICBlLnRhZyA9IF9yYW5rTWdyLnJhbmtUYWcubWFpblNjb3JlO1xuICAgICAgICBlLmxldmVsVGFnID0gYS5taWFuO1xuICAgICAgICBlLmRhdGFUYWcgPSBzLnNjb3JlO1xuICAgICAgICBlLmxhc3Rfdmlld19pbm5lcl95ID0gLTE7XG4gICAgICAgIGUuVEhFTUVfSCA9IDEyMjtcbiAgICAgICAgZS50b3Bfb2ZmZXN0ID0gNjE7XG4gICAgICAgIGUuaXRlbUNvdW50ID0gMDtcbiAgICAgICAgZS5pdGVtcyA9IFtdO1xuICAgICAgICBlLnJhbmtEYXRhID0gW107XG4gICAgICAgIGUucGxheUFuaSA9ICEwO1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgX19leHRlbmRzKGUsIHQpO1xuICAgIGUucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCgodGhpcy5ub2RlLmhlaWdodCA9IGNjLndpblNpemUuaGVpZ2h0KSwgX2dsb2JhbC5kZWZhdWx0LnBhZFNjYWxlKSkge1xuICAgICAgICAgICAgdGhpcy5iZ1Nwci5ub2RlLnNjYWxlID0gX2dsb2JhbC5kZWZhdWx0LnBhZFNjYWxlO1xuICAgICAgICAgICAgdmFyIHQgPSAoY2Mudmlldy5nZXRWaXNpYmxlU2l6ZSgpLndpZHRoIC0gNzIwKSAvIDI7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTm9kZS54IC09IHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGUgPSB0aGlzLm5vZGUuaGVpZ2h0IC0gMTI4MDtcbiAgICAgICAgdGhpcy5zY3JvbGxWaWV3Lm5vZGUuaGVpZ2h0ICs9IGU7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmlldy5ub2RlLmdldENoaWxkQnlOYW1lKFwidmlld1wiKS5oZWlnaHQgKz0gZTtcbiAgICAgICAgdGhpcy5zY3JvbGxWaWV3LnZlcnRpY2FsID0gITE7XG4gICAgICAgIHZhciBvID0gX3RpbWUuZGVmYXVsdC5pbnMuc2VydmVyVGltZSB8fCBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMWUzKTtcbiAgICAgICAgaWYgKG8gLSBfcEluZm8uZGVmYXVsdC5pbnMuZ2V0UmFua0xhc3RUaW1lRGF0YSgpID49IDM2MDApIHtcbiAgICAgICAgICAgIF9wSW5mby5kZWZhdWx0Lmlucy5zZXRSYW5rTGFzdFRpbWVEYXRhKG8pO1xuICAgICAgICAgICAgdmFyIG4gPSBfaWR4LnBsYXRmb3JtLmdldFVzZXJJbmZvKCk7XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMubXlSYW5rLmdldENvbXBvbmVudChfcmFua0l0ZW0uZGVmYXVsdCk7XG4gICAgICAgICAgICBuXG4gICAgICAgICAgICAgICAgPyBuLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3QuZGVmYXVsdC5pbnMudXBkYXRlVXNlckluZm8odCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0SGVhZFNwKF91RGF0YS5kZWZhdWx0Lmlucy5nZXRIZWFkSW1nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldERlZmF1bHRIZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogaS5zZXREZWZhdWx0SGVhZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZSA9IF9teVNhZmVBcmVhLmdldFNhZmVBcmVhUmVjdCgpLnlNaW47XG4gICAgICAgICAgICB0LnRvcE5vZGUueSAtPSBlO1xuICAgICAgICAgICAgdC5zY3JvbGxWaWV3Lm5vZGUueSAtPSBlIC8gMjtcbiAgICAgICAgICAgIHQuc2Nyb2xsVmlldy5ub2RlLmdldENoaWxkQnlOYW1lKFwidmlld1wiKS5oZWlnaHQgLT0gZTtcbiAgICAgICAgICAgIHQuc2Nyb2xsVmlldy5jb250ZW50LnkgLT0gZSAvIDI7XG4gICAgICAgICAgICB0LnNjcm9sbFZpZXcubm9kZS5vbihcbiAgICAgICAgICAgICAgICBcInNjcm9sbGluZ1wiLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdC5SZWZyZXNoVGhlbWVzVmlzaWJsZSgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHQubG9hZGluZ05vZGUucG9zaXRpb24gPSB0LnNjcm9sbFZpZXcubm9kZS5wb3NpdGlvbjtcbiAgICAgICAgICAgIHQuaW5pdERhdGEoKTtcbiAgICAgICAgICAgIF9yYW5rTWdyLmRlZmF1bHQuaW5zLnVwbG9hZFJhbmtEYXRhKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuaW5pdERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaERhdGEoKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLnJlZnJlc2hEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxldmVsVGFnID09PSBhLm1pYW5cbiAgICAgICAgICAgID8gdGhpcy5kYXRhVGFnID09PSBzLnNjb3JlXG4gICAgICAgICAgICAgICAgPyAodGhpcy50YWcgPSBfcmFua01nci5yYW5rVGFnLm1haW5TY29yZSlcbiAgICAgICAgICAgICAgICA6ICh0aGlzLnRhZyA9IF9yYW5rTWdyLnJhbmtUYWcubWFpbldpbilcbiAgICAgICAgICAgIDogdGhpcy5sZXZlbFRhZyA9PT0gYS5kYWlseSAmJlxuICAgICAgICAgICAgICAodGhpcy5kYXRhVGFnID09PSBzLnNjb3JlXG4gICAgICAgICAgICAgICAgICA/ICh0aGlzLnRhZyA9IF9yYW5rTWdyLnJhbmtUYWcuZGFpbHlTY29yZSlcbiAgICAgICAgICAgICAgICAgIDogKHRoaXMudGFnID0gX3JhbmtNZ3IucmFua1RhZy5kYWlseVdpbikpO1xuICAgICAgICB0aGlzLmdldFJhbmtkYXRhKCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5nZXRSYW5rZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICBfcmFua01nci5kZWZhdWx0Lmlucy5nZXRSYW5rRGF0YUJ5VHlwZSh0aGlzLnRhZywgdGhpcy50eXBlKS50aGVuKFxuICAgICAgICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB0LmRlYWxEYXRhKGUuZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHQuZGVhbERhdGEoW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuZGVhbERhdGEgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLm5vZGUgJiYgKHRoaXMubG9hZGluZ05vZGUuYWN0aXZlID0gITEpO1xuICAgICAgICB2YXIgZSA9ICExO1xuICAgICAgICB2YXIgbyA9IFtdO1xuICAgICAgICB2YXIgbiA9IF9yYW5rTWdyLmRlZmF1bHQuaW5zLmdldE15UmFua0RhdGFCeVRhZyh0aGlzLnRhZywgdGhpcy50eXBlKSB8fCAwO1xuICAgICAgICBpZiAodClcbiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gKG8gPSBvLmNvbmNhdCh0KSkpXG4gICAgICAgICAgICAgICAgaWYgKChyID0gb1tpXSkuZ2FtZV91aWQgPT0gX3VEYXRhLmRlZmF1bHQuaW5zLmdldFVpZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHIubmlja25hbWUgPSBfdURhdGEuZGVmYXVsdC5pbnMuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgICAgICAgICByLnNvcnRfdmFsdWUgPSBuO1xuICAgICAgICAgICAgICAgICAgICByLmdhbWVfdWlkID0gX3VEYXRhLmRlZmF1bHQuaW5zLmdldFVpZCgpO1xuICAgICAgICAgICAgICAgICAgICByLmF2YXRhciA9IF91RGF0YS5kZWZhdWx0Lmlucy5nZXRIZWFkSW1nKCk7XG4gICAgICAgICAgICAgICAgICAgIGUgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICAgIHZhciByID0ge1xuICAgICAgICAgICAgICAgIG5pY2tuYW1lOiBfdURhdGEuZGVmYXVsdC5pbnMuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHNvcnRfdmFsdWU6IG4sXG4gICAgICAgICAgICAgICAgZ2FtZV91aWQ6IF91RGF0YS5kZWZhdWx0Lmlucy5nZXRVaWQoKSxcbiAgICAgICAgICAgICAgICBhdmF0YXI6IF91RGF0YS5kZWZhdWx0Lmlucy5nZXRIZWFkSW1nKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBvLnB1c2gocik7XG4gICAgICAgIH1cbiAgICAgICAgby5zb3J0KGZ1bmN0aW9uICh0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5zb3J0X3ZhbHVlIC0gdC5zb3J0X3ZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yYW5rRGF0YSA9IG87XG4gICAgICAgIHRoaXMucmVmcmVzaFBhbmVsKCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5yZWZyZXNoUGFuZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0TXlTZWxmKCk7XG4gICAgICAgIHRoaXMuaXRlbUNvdW50ID0gOTc7XG4gICAgICAgIHZhciB0ID0gdGhpcy5USEVNRV9IICogdGhpcy5pdGVtQ291bnQgKyB0aGlzLnRvcF9vZmZlc3Q7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmlldy5jb250ZW50LnNldENvbnRlbnRTaXplKGNjLnNpemUoY2Mud2luU2l6ZS53aWR0aCwgdCkpO1xuICAgICAgICB0aGlzLmxhc3Rfdmlld19pbm5lcl95ID0gLTE7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmlldy5zdG9wQXV0b1Njcm9sbCgpO1xuICAgICAgICB0aGlzLnNjcm9sbFZpZXcuc2Nyb2xsVG9Ub3AoKTtcbiAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCAzOyBlKyspIHtcbiAgICAgICAgICAgIHZhciBvID0gdGhpcy5yYW5rRGF0YVtlXTtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5yYW5rVG9wW2VdO1xuICAgICAgICAgICAgdGhpcy5zZXRSYW5rVG9wKG4sIG8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuUmVmcmVzaFRoZW1lc1Zpc2libGUoKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLlJlZnJlc2hUaGVtZXNWaXNpYmxlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICB2b2lkIDAgPT09IHQgJiYgKHQgPSAwKTtcbiAgICAgICAgdmFyIG8gPSB0aGlzLnNjcm9sbFZpZXcuZ2V0Q29udGVudFBvc2l0aW9uKCk7XG4gICAgICAgIGlmICghKE1hdGguYWJzKHRoaXMubGFzdF92aWV3X2lubmVyX3kgLSBvLnkpIDwgMC4wMSkpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdF92aWV3X2lubmVyX3kgPSBvLnk7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIHZhciBuLFxuICAgICAgICAgICAgICAgICAgICBpLFxuICAgICAgICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICBsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IC1kICogdS5USEVNRV9IIC0gdS50b3Bfb2ZmZXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHUuc2Nyb2xsVmlldy5jb250ZW50LmNvbnZlcnRUb1dvcmxkU3BhY2VBUihjYy52MigwLCBuKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByID0gdS5ub2RlLmNvbnZlcnRUb05vZGVTcGFjZUFSKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHIueSA8IC1wIHx8IHIueSArIHUuVEhFTUVfSCA+IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZCArIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHUucmFua0RhdGFbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSkgdS5pdGVtc1tzXSAmJiAodS5pdGVtc1tzXS5hY3RpdmUgPSAhMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh1Lml0ZW1zW3NdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5zZXRJdGVtSW5mbyh1Lml0ZW1zW3NdLCB0LCBvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHUucGxheUFuaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1Lml0ZW1zW3NdLnggPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1Lml0ZW1zW3NdLm9wYWNpdHkgPSAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLml0ZW1zW3NdLmFjdGl2ZSA9ICEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubGFzdF92aWV3X2lubmVyX3kgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLlJlZnJlc2hUaGVtZXNWaXNpYmxlKGQgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsICYmIGUuc2hvd0NoZ0FuaShlLml0ZW1zW3NdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDAuMDYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJicmVha1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5pdGVtc1tzXS54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1Lml0ZW1zW3NdLm9wYWNpdHkgPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5pdGVtc1tzXS5hY3RpdmUgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSBjYy5pbnN0YW50aWF0ZSh1LnZpZXdJdGVtKSkuYWN0aXZlID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5wb3NpdGlvbiA9IGNjLnYzKDAsIC1kICogdS5USEVNRV9IIC0gdS50b3Bfb2ZmZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnBhcmVudCA9IHUuc2Nyb2xsVmlldy5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuaXRlbXNbc10gPSBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuc2V0SXRlbUluZm8oYywgdCwgbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSB1LnBsYXlBbmk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYy54ID0gKGNjLndpblNpemUud2lkdGggKyB1Lml0ZW1zW3NdLndpZHRoKSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMub3BhY2l0eSA9IDI1NSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1LnNjaGVkdWxlT25jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5sYXN0X3ZpZXdfaW5uZXJfeSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuUmVmcmVzaFRoZW1lc1Zpc2libGUoZCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggJiYgZS5zaG93TG9hZEFuaShjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDAuMDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJicmVha1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5vcGFjaXR5ID0gMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMueCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1LnBsYXlBbmkgPSAhMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPT09IHUuaXRlbUNvdW50IC0gMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zY3JvbGxWaWV3LnZlcnRpY2FsID0gITA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMC41KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdSA9IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIHAgPSAodGhpcy5zY3JvbGxWaWV3Lm5vZGUuaGVpZ2h0IC8gNCkgKiAzLFxuICAgICAgICAgICAgICAgICAgICBkID0gdDtcbiAgICAgICAgICAgICAgICBkIDwgdGhpcy5pdGVtQ291bnQgJiYgXCJicmVha1wiICE9PSBsKCk7XG4gICAgICAgICAgICAgICAgZCsrXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5zZXRSYW5rVG9wID0gZnVuY3Rpb24gKHQsIGUpIHtcbiAgICAgICAgdmFyIG8gPSB0LmdldENvbXBvbmVudChfcmFua0l0ZW0uZGVmYXVsdCk7XG4gICAgICAgIGVcbiAgICAgICAgICAgID8gKG8uc2V0UmFua0RhdGEoZSksXG4gICAgICAgICAgICAgIG8uc2V0R2FtZVVpZChlLmdhbWVfdWlkKSxcbiAgICAgICAgICAgICAgby5zZXRTY29yZShlLnNvcnRfdmFsdWUpLFxuICAgICAgICAgICAgICBlLmdhbWVfdWlkID09IF91RGF0YS5kZWZhdWx0Lmlucy5nZXRVaWQoKVxuICAgICAgICAgICAgICAgICAgPyAoby5zZXRTa2luKF9wSW5mby5kZWZhdWx0Lmlucy5nZXRVc2luZ1NraW4oKSwgITEsICEwKSxcbiAgICAgICAgICAgICAgICAgICAgby5zZXROaWNrTmFtZShfdURhdGEuZGVmYXVsdC5pbnMuZ2V0TmFtZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgby5zZXRIZWFkU3AoX3VEYXRhLmRlZmF1bHQuaW5zLmdldEhlYWRJbWcoKSkpXG4gICAgICAgICAgICAgICAgICA6IChvLnNldFNraW4obnVsbCA9PSBlID8gdm9pZCAwIDogZS51U2tpbiwgITEsICEwKSxcbiAgICAgICAgICAgICAgICAgICAgby5zZXROaWNrTmFtZShlLm5pY2tuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgZS5hdmF0YXIgPyBvLnNldEhlYWRTcChlLmF2YXRhcikgOiBvLnNldERlZmF1bHRIZWFkKCkpKVxuICAgICAgICAgICAgOiAoby5zZXROaWNrTmFtZShcIuaaguaXoFwiKSwgby5zZXRTY29yZShcIjBcIiksIG8uc2V0RGVmYXVsdEhlYWQoKSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5zZXRJdGVtSW5mbyA9IGZ1bmN0aW9uICh0LCBlLCBvLCBuKSB7XG4gICAgICAgIHZvaWQgMCA9PT0gbiAmJiAobiA9ICExKTtcbiAgICAgICAgdmFyIGkgPSB0LmdldENvbXBvbmVudChfcmFua0l0ZW0uZGVmYXVsdCk7XG4gICAgICAgIGkuc2V0SWR4KE51bWJlcihlKSArIDEgKyBcIlwiKTtcbiAgICAgICAgb1xuICAgICAgICAgICAgPyAoaS5zZXRSYW5rRGF0YShvKSxcbiAgICAgICAgICAgICAgaS5zZXRHYW1lVWlkKG8uZ2FtZV91aWQpLFxuICAgICAgICAgICAgICBpLnNldFNjb3JlKG8uc29ydF92YWx1ZSksXG4gICAgICAgICAgICAgIG8uZ2FtZV91aWQgPT0gX3VEYXRhLmRlZmF1bHQuaW5zLmdldFVpZCgpXG4gICAgICAgICAgICAgICAgICA/IChpLnNldFNraW4oX3BJbmZvLmRlZmF1bHQuaW5zLmdldFVzaW5nU2tpbigpLCBuKSxcbiAgICAgICAgICAgICAgICAgICAgaS5zZXROaWNrTmFtZShfdURhdGEuZGVmYXVsdC5pbnMuZ2V0TmFtZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgaS5zZXRIZWFkU3AoX3VEYXRhLmRlZmF1bHQuaW5zLmdldEhlYWRJbWcoKSkpXG4gICAgICAgICAgICAgICAgICA6IChpLnNldFNraW4obnVsbCA9PSBvID8gdm9pZCAwIDogby51U2tpbiksXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0Tmlja05hbWUoby5uaWNrbmFtZSksXG4gICAgICAgICAgICAgICAgICAgIG8uYXZhdGFyID8gaS5zZXRIZWFkU3Aoby5hdmF0YXIpIDogaS5zZXREZWZhdWx0SGVhZCgpKSlcbiAgICAgICAgICAgIDogKGkuc2V0Tmlja05hbWUoXCLmmoLml6BcIiksIGkuc2V0U2NvcmUoXCIwXCIpLCBpLnNldERlZmF1bHRIZWFkKCkpO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuc2V0TXlTZWxmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMucmFua0RhdGE7XG4gICAgICAgIGZvciAodmFyIGUgaW4gdCkge1xuICAgICAgICAgICAgdmFyIG8gPSB0W2VdO1xuICAgICAgICAgICAgaWYgKG8uZ2FtZV91aWQgPT0gX3VEYXRhLmRlZmF1bHQuaW5zLmdldFVpZCgpICYmIE51bWJlcihlKSA8IDEwMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCB0aGlzLnNldEl0ZW1JbmZvKHRoaXMubXlSYW5rLCBlLCBvLCAhMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG4gPSBfcmFua01nci5kZWZhdWx0Lmlucy5nZXRNeVJhbmtEYXRhQnlUYWcodGhpcy50YWcsIHRoaXMudHlwZSk7XG4gICAgICAgIHZhciBpID0gdGhpcy5teVJhbmsuZ2V0Q29tcG9uZW50KF9yYW5rSXRlbS5kZWZhdWx0KTtcbiAgICAgICAgaS5zZXRTa2luKF9wSW5mby5kZWZhdWx0Lmlucy5nZXRVc2luZ1NraW4oKSwgITApO1xuICAgICAgICBpLnNldEdhbWVVaWQoX3VEYXRhLmRlZmF1bHQuaW5zLmdldFVpZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBpLnNldElkeChcIjk5K1wiKTtcbiAgICAgICAgaS5zZXROaWNrTmFtZShfdURhdGEuZGVmYXVsdC5pbnMuZ2V0TmFtZSgpKTtcbiAgICAgICAgaS5zZXRTY29yZShuICsgXCJcIik7XG4gICAgICAgIF91RGF0YS5kZWZhdWx0Lmlucy5nZXRIZWFkSW1nKCkgPyBpLnNldEhlYWRTcChfdURhdGEuZGVmYXVsdC5pbnMuZ2V0SGVhZEltZygpKSA6IGkuc2V0RGVmYXVsdEhlYWQoKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLnNldEhlYWRPbkxpbmUgPSBmdW5jdGlvbiAodCwgZSkge1xuICAgICAgICB2YXIgbyA9IHRoaXM7XG4gICAgICAgIGNjLmFzc2V0TWFuYWdlci5sb2FkUmVtb3RlKGUsIGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgICAgICAgICAhZSAmJiBvLm5vZGUgJiYgby5ub2RlLmlzVmFsaWQgJiYgKHQuc3ByaXRlRnJhbWUgPSBuZXcgY2MuU3ByaXRlRnJhbWUobikpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLnNldERlZmF1bHRIZWFkID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICBfcmVzLmRlZmF1bHQuaW5zXG4gICAgICAgICAgICAuZ2V0QnVuZGxlQnlTdHJpbmcoXCJyZXNTcHNcIilcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAgICAgby5sb2FkKFwiY29tbW9uL2hlYWRfMVwiLCBjYy5TcHJpdGVGcmFtZSwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICAgICAgICAgICAgICAgICAgIW8gJiYgZS5ub2RlICYmIGUubm9kZS5pc1ZhbGlkICYmICh0LnNwcml0ZUZyYW1lID0gbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlJUb29sLmlucy5nZXRCdW5kbGVCeVN0cmluZygncmVzU3BzJylcIiwgdCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLnNob3dMb2FkQW5pID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgY2MudHdlZW4odCkudG8oMC41LCB7eDogMH0sIHtlYXNpbmc6IFwiYmFja0luT3V0XCJ9KS5zdGFydCgpO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUuc2hvd0NoZ0FuaSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgIGNjLnR3ZWVuKHQpLnRvKDAuNSwge29wYWNpdHk6IDI1NX0pLnN0YXJ0KCk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5vbkJ0bkNoZ0RheVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5pdEFuaSgpO1xuICAgICAgICB0aGlzLnR5cGUgPT0gX3JhbmtNZ3IucmFua1R5cGUuVG90YWxcbiAgICAgICAgICAgID8gKCh0aGlzLnR5cGUgPSBfcmFua01nci5yYW5rVHlwZS5Ub2RheSksXG4gICAgICAgICAgICAgIHRoaXMucmVmcmVzaERhdGEoKSxcbiAgICAgICAgICAgICAgKHRoaXMuZGF5VHlwZUJ0bnNTcHNbMF0uYWN0aXZlID0gITEpLFxuICAgICAgICAgICAgICAodGhpcy5kYXlUeXBlQnRuc1Nwc1sxXS5hY3RpdmUgPSAhMCkpXG4gICAgICAgICAgICA6IHRoaXMudHlwZSA9PSBfcmFua01nci5yYW5rVHlwZS5Ub2RheSAmJlxuICAgICAgICAgICAgICAoKHRoaXMudHlwZSA9IF9yYW5rTWdyLnJhbmtUeXBlLlRvdGFsKSxcbiAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoRGF0YSgpLFxuICAgICAgICAgICAgICAodGhpcy5kYXlUeXBlQnRuc1Nwc1swXS5hY3RpdmUgPSAhMCksXG4gICAgICAgICAgICAgICh0aGlzLmRheVR5cGVCdG5zU3BzWzFdLmFjdGl2ZSA9ICExKSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5vbkJ0bk1haW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGV2ZWxUYWcgIT09IGEubWlhbiAmJlxuICAgICAgICAgICAgKHRoaXMuaW5pdEFuaSgpLCAodGhpcy5sZXZlbFRhZyA9IGEubWlhbiksIHRoaXMucmVmcmVzaERhdGEoKSwgdGhpcy5jaGdMZXZlbFRhZ0J0bnMoITApKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uQnRuRGFpbHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aXBNZ3IuZGVmYXVsdC5pbnMuc2hvd1RpcChfbGFuZy5sYW5nWzEwMDA0XSk7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5jaGdMZXZlbFRhZ0J0bnMgPSBmdW5jdGlvbiAodCkge1xuICAgICAgICB0aGlzLmxldmVsVGFnQnRuc1Nwc1swXS5hY3RpdmUgPSB0O1xuICAgICAgICB0aGlzLmxldmVsVGFnQnRuc1Nwc1sxXS5hY3RpdmUgPSAhdDtcbiAgICAgICAgdGhpcy5sZXZlbFRhZ0J0bnNTcHNbMl0uYWN0aXZlID0gIXQ7XG4gICAgICAgIHRoaXMubGV2ZWxUYWdCdG5zU3BzWzNdLmFjdGl2ZSA9IHQ7XG4gICAgfTtcbiAgICBlLnByb3RvdHlwZS5vbkJ0bkNoZ0RhdGFUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmluaXRBbmkoKTtcbiAgICAgICAgdGhpcy5kYXRhVGFnID09IHMuc2NvcmVcbiAgICAgICAgICAgID8gKCh0aGlzLmRhdGFUYWcgPSBzLndpbiksXG4gICAgICAgICAgICAgIHRoaXMucmVmcmVzaERhdGEoKSxcbiAgICAgICAgICAgICAgKHRoaXMuZGF0YVRhZ0J0bnNTcHNbMF0uYWN0aXZlID0gITEpLFxuICAgICAgICAgICAgICAodGhpcy5kYXRhVGFnQnRuc1Nwc1sxXS5hY3RpdmUgPSAhMCkpXG4gICAgICAgICAgICA6IHRoaXMuZGF0YVRhZyA9PSBzLndpbiAmJlxuICAgICAgICAgICAgICAoKHRoaXMuZGF0YVRhZyA9IHMuc2NvcmUpLFxuICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hEYXRhKCksXG4gICAgICAgICAgICAgICh0aGlzLmRhdGFUYWdCdG5zU3BzWzBdLmFjdGl2ZSA9ICEwKSxcbiAgICAgICAgICAgICAgKHRoaXMuZGF0YVRhZ0J0bnNTcHNbMV0uYWN0aXZlID0gITEpKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmluaXRBbmkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xuICAgICAgICBmb3IgKHZhciB0ID0gMCwgZSA9IHRoaXMuaXRlbXMubGVuZ3RoOyB0IDwgZTsgdCsrKSB7XG4gICAgICAgICAgICB2YXIgbyA9IHRoaXMuaXRlbXNbdF07XG4gICAgICAgICAgICBjYy5Ud2Vlbi5zdG9wQWxsQnlUYXJnZXQobyk7XG4gICAgICAgICAgICBvICYmIChvLm9wYWNpdHkgPSAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjcm9sbFZpZXcuc3RvcEF1dG9TY3JvbGwoKTtcbiAgICAgICAgdGhpcy5zY3JvbGxWaWV3LnNjcm9sbFRvVG9wKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsVmlldy52ZXJ0aWNhbCA9ICExO1xuICAgICAgICB0aGlzLnBsYXlBbmkgPSAhMDtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmhpZGVUaGlzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLm9uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2MuYXNzZXRNYW5hZ2VyLnJlbGVhc2VBc3NldCh0aGlzLmJnU3ByLnNwcml0ZUZyYW1lKTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1QoY2MuU2Nyb2xsVmlldyldLCBlLnByb3RvdHlwZSwgXCJzY3JvbGxWaWV3XCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbVChbY2MuTm9kZV0pXSwgZS5wcm90b3R5cGUsIFwiZGF0YVRhZ0J0bnNTcHNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtUKFtjYy5Ob2RlXSldLCBlLnByb3RvdHlwZSwgXCJsZXZlbFRhZ0J0bnNTcHNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtUKFtjYy5Ob2RlXSldLCBlLnByb3RvdHlwZSwgXCJkYXlUeXBlQnRuc1Nwc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1QoY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJ2aWV3SXRlbVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1QoW2NjLk5vZGVdKV0sIGUucHJvdG90eXBlLCBcInJhbmtUb3BcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtUKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwibXlSYW5rXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbVChjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcInRvcE5vZGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtUKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwibG9hZGluZ05vZGVcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtUKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiY2xvc2VOb2RlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbVChjYy5TcHJpdGUpXSwgZS5wcm90b3R5cGUsIFwiYmdTcHJcIiwgdm9pZCAwKTtcbiAgICByZXR1cm4gX19kZWNvcmF0ZShbU10sIGUpO1xufSkoX2Jhc2VVSS5kZWZhdWx0KTtcbmV4cG9ydHMuZGVmYXVsdCA9IEk7XG4iXX0=