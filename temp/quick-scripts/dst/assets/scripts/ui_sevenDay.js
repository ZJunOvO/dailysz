
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/ui_sevenDay.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'c6f14ub1LFHhI8ElFgzZRTz', 'ui_sevenDay');
// scripts/ui_sevenDay.js

"use strict";

var n;
Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _evts = require("evts");

var _idx = require("idx");

var _pConst = require("pConst");

var _request = require("request");

var _cfgMgr = require("cfgMgr");

var _bagMgr = require("bagMgr");

var _panelMgr = require("panelMgr");

var _tipMgr = require("tipMgr");

var _pInfo = require("pInfo");

var _baseUI = require("baseUI");

var _dayReward = require("dayReward");

var m = cc._decorator;
var v = m.ccclass;
var _ = m.property;

var b = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.dayNodes = [];
    e.getBtnNode = null;
    e.hasGetNode = null;
    e.reciveReward = {};
    e.aniData = [];
    e.canRecive = !1;
    return e;
  }

  __extends(e, t);

  e.prototype.onLoad = function () {};

  e.prototype.init = function () {
    for (var t = _pInfo["default"].ins.getSevenDays(), e = _pInfo["default"].ins.getSevenReward(), o = _cfgMgr["default"].serverCfg.seven_day_reward.rules, n = {}, i = 0, r = this.dayNodes.length; i < r; i++) {
      var a = o[i].val;
      var s = this.dayNodes[i];
      if (s.initItem(a), s.setDefault(), 6 === i && s.setCanRecive(), i < t && (s.setCanRecive(), i < e && s.setRecived()), t > i && i >= e) for (var c in this.aniData = this.aniData.concat(s.aniDatas), this.canRecive = !0, a) {
        var l = a[c];
        n[c] ? n[c] += l : n[c] = l;
      }
    }

    this.reciveReward = n;
    this.checkBtns();
  };

  e.prototype.checkBtns = function () {
    this.getBtnNode.active = this.canRecive;
    this.hasGetNode.active = !this.canRecive;
  };

  e.prototype.onBtnGet = function () {
    var t = this;

    if (this.canRecive) {
      this.canRecive = !1;
      this.checkBtns();

      for (var e = [], o = 0, n = this.aniData.length; o < n; o++) {
        var i = this.aniData[o];
        var r = {};
        var u = i.itemId;
        var g = Number(i.value);
        r.itemId = u;
        r.worldPos = i.itemNode.parent.convertToWorldSpaceAR(i.itemNode.position);
        r.value = g;
        e.push(r);

        _bagMgr["default"].ins.addItem(u, g);
      }

      var y = _pInfo["default"].ins.getSevenDays();

      _pInfo["default"].ins.setSevenReward(y);

      _evts["default"].opE.emit({
        action: _evts["default"].SIGN_RED
      });

      var m = _pInfo["default"].ins.getSevenReward();

      for (o = 0, n = this.dayNodes.length; o < n; o++) {
        var v = this.dayNodes[o];
        v.setDefault();
        6 === o && v.setCanRecive();
        o < y && (v.setCanRecive(), o < m && v.setRecived());
      }

      if (_idx.platform.string() == _pConst.PFCode.Bytedance) {
        var _ = _idx.platform.getSystemData();

        if (_) {
          var b = 0;

          switch (_.appName) {
            case "Douyin":
              b = 1;
              break;

            case "douyin_lite":
              b = 2;
          }

          var w = -1 != _.system.indexOf("iOS");

          b && y < 7 && !w && _request["default"].ins.sendSevenCard(b, y + 1);
        }
      }

      _panelMgr["default"].ins.open("ui/ui_flyAni", {
        itemDatas: e,
        hideCb: function hideCb() {
          t.hideThis();
        }
      });
    } else _tipMgr["default"].ins.showTip("已领取");
  };

  e.prototype.hideThis = function () {
    this.hide();
  };

  __decorate([_([_dayReward["default"]])], e.prototype, "dayNodes", void 0);

  __decorate([_(cc.Node)], e.prototype, "getBtnNode", void 0);

  __decorate([_(cc.Node)], e.prototype, "hasGetNode", void 0);

  return __decorate([v], e);
}(_baseUI["default"]);

exports["default"] = b;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcdWlfc2V2ZW5EYXkuanMiXSwibmFtZXMiOlsibiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2V2dHMiLCJyZXF1aXJlIiwiX2lkeCIsIl9wQ29uc3QiLCJfcmVxdWVzdCIsIl9jZmdNZ3IiLCJfYmFnTWdyIiwiX3BhbmVsTWdyIiwiX3RpcE1nciIsIl9wSW5mbyIsIl9iYXNlVUkiLCJfZGF5UmV3YXJkIiwibSIsImNjIiwiX2RlY29yYXRvciIsInYiLCJjY2NsYXNzIiwiXyIsInByb3BlcnR5IiwiYiIsInQiLCJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJkYXlOb2RlcyIsImdldEJ0bk5vZGUiLCJoYXNHZXROb2RlIiwicmVjaXZlUmV3YXJkIiwiYW5pRGF0YSIsImNhblJlY2l2ZSIsIl9fZXh0ZW5kcyIsInByb3RvdHlwZSIsIm9uTG9hZCIsImluaXQiLCJpbnMiLCJnZXRTZXZlbkRheXMiLCJnZXRTZXZlblJld2FyZCIsIm8iLCJzZXJ2ZXJDZmciLCJzZXZlbl9kYXlfcmV3YXJkIiwicnVsZXMiLCJpIiwiciIsImxlbmd0aCIsImEiLCJ2YWwiLCJzIiwiaW5pdEl0ZW0iLCJzZXREZWZhdWx0Iiwic2V0Q2FuUmVjaXZlIiwic2V0UmVjaXZlZCIsImMiLCJjb25jYXQiLCJhbmlEYXRhcyIsImwiLCJjaGVja0J0bnMiLCJhY3RpdmUiLCJvbkJ0bkdldCIsInUiLCJpdGVtSWQiLCJnIiwiTnVtYmVyIiwid29ybGRQb3MiLCJpdGVtTm9kZSIsInBhcmVudCIsImNvbnZlcnRUb1dvcmxkU3BhY2VBUiIsInBvc2l0aW9uIiwicHVzaCIsImFkZEl0ZW0iLCJ5Iiwic2V0U2V2ZW5SZXdhcmQiLCJvcEUiLCJlbWl0IiwiYWN0aW9uIiwiU0lHTl9SRUQiLCJwbGF0Zm9ybSIsInN0cmluZyIsIlBGQ29kZSIsIkJ5dGVkYW5jZSIsImdldFN5c3RlbURhdGEiLCJhcHBOYW1lIiwidyIsInN5c3RlbSIsImluZGV4T2YiLCJzZW5kU2V2ZW5DYXJkIiwib3BlbiIsIml0ZW1EYXRhcyIsImhpZGVDYiIsImhpZGVUaGlzIiwic2hvd1RpcCIsImhpZGUiLCJfX2RlY29yYXRlIiwiTm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFKO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7RUFBQ0MsS0FBSyxFQUFFLENBQUM7QUFBVCxDQUE3Qzs7QUFDQSxJQUFJQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQW5COztBQUNBLElBQUlDLElBQUksR0FBR0QsT0FBTyxDQUFDLEtBQUQsQ0FBbEI7O0FBQ0EsSUFBSUUsT0FBTyxHQUFHRixPQUFPLENBQUMsUUFBRCxDQUFyQjs7QUFDQSxJQUFJRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyxTQUFELENBQXRCOztBQUNBLElBQUlJLE9BQU8sR0FBR0osT0FBTyxDQUFDLFFBQUQsQ0FBckI7O0FBQ0EsSUFBSUssT0FBTyxHQUFHTCxPQUFPLENBQUMsUUFBRCxDQUFyQjs7QUFDQSxJQUFJTSxTQUFTLEdBQUdOLE9BQU8sQ0FBQyxVQUFELENBQXZCOztBQUNBLElBQUlPLE9BQU8sR0FBR1AsT0FBTyxDQUFDLFFBQUQsQ0FBckI7O0FBQ0EsSUFBSVEsTUFBTSxHQUFHUixPQUFPLENBQUMsT0FBRCxDQUFwQjs7QUFDQSxJQUFJUyxPQUFPLEdBQUdULE9BQU8sQ0FBQyxRQUFELENBQXJCOztBQUNBLElBQUlVLFVBQVUsR0FBR1YsT0FBTyxDQUFDLFdBQUQsQ0FBeEI7O0FBQ0EsSUFBSVcsQ0FBQyxHQUFHQyxFQUFFLENBQUNDLFVBQVg7QUFDQSxJQUFJQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0ksT0FBVjtBQUNBLElBQUlDLENBQUMsR0FBR0wsQ0FBQyxDQUFDTSxRQUFWOztBQUNBLElBQUlDLENBQUMsR0FBSSxVQUFVQyxDQUFWLEVBQWE7RUFDbEIsU0FBU0MsQ0FBVCxHQUFhO0lBQ1QsSUFB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O01BQ0o7O01BQ0Q5RCxTQUFTLFdBQVQsQ0FBa0IyQixHQUFsQixDQUFzQm1ELElBQXRCLENBQTJCLGNBQTNCLEVBQTJDO1FBQ3ZDQyxTQUFTLEVBQUVqRSxDQUQ0QjtRQUV2Q2tFLE1BQU0sRUFBRSxrQkFBWTtVQUNoQm5FLENBQUMsQ0FBQ29FLFFBQUY7UUFDSDtNQUpzQyxDQUEzQztJQU1ILENBN0NELE1BNkNPaEYsT0FBTyxXQUFQLENBQWdCMEIsR0FBaEIsQ0FBb0J1RCxPQUFwQixDQUE0QixLQUE1QjtFQUNWLENBaEREOztFQWlEQXBFLENBQUMsQ0FBQ1UsU0FBRixDQUFZeUQsUUFBWixHQUF1QixZQUFZO0lBQy9CLEtBQUtFLElBQUw7RUFDSCxDQUZEOztFQUdBQyxVQUFVLENBQUMsQ0FBQzFFLENBQUMsQ0FBQyxDQUFDTixVQUFVLFdBQVgsQ0FBRCxDQUFGLENBQUQsRUFBNEJVLENBQUMsQ0FBQ1UsU0FBOUIsRUFBeUMsVUFBekMsRUFBcUQsS0FBSyxDQUExRCxDQUFWOztFQUNBNEQsVUFBVSxDQUFDLENBQUMxRSxDQUFDLENBQUNKLEVBQUUsQ0FBQytFLElBQUosQ0FBRixDQUFELEVBQWV2RSxDQUFDLENBQUNVLFNBQWpCLEVBQTRCLFlBQTVCLEVBQTBDLEtBQUssQ0FBL0MsQ0FBVjs7RUFDQTRELFVBQVUsQ0FBQyxDQUFDMUUsQ0FBQyxDQUFDSixFQUFFLENBQUMrRSxJQUFKLENBQUYsQ0FBRCxFQUFldkUsQ0FBQyxDQUFDVSxTQUFqQixFQUE0QixZQUE1QixFQUEwQyxLQUFLLENBQS9DLENBQVY7O0VBQ0EsT0FBTzRELFVBQVUsQ0FBQyxDQUFDNUUsQ0FBRCxDQUFELEVBQU1NLENBQU4sQ0FBakI7QUFDSCxDQXJHTyxDQXFHTFgsT0FBTyxXQXJHRixDQUFSOztBQXNHQVosT0FBTyxXQUFQLEdBQWtCcUIsQ0FBbEIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBuO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6ICEwfSk7XG52YXIgX2V2dHMgPSByZXF1aXJlKFwiZXZ0c1wiKTtcbnZhciBfaWR4ID0gcmVxdWlyZShcImlkeFwiKTtcbnZhciBfcENvbnN0ID0gcmVxdWlyZShcInBDb25zdFwiKTtcbnZhciBfcmVxdWVzdCA9IHJlcXVpcmUoXCJyZXF1ZXN0XCIpO1xudmFyIF9jZmdNZ3IgPSByZXF1aXJlKFwiY2ZnTWdyXCIpO1xudmFyIF9iYWdNZ3IgPSByZXF1aXJlKFwiYmFnTWdyXCIpO1xudmFyIF9wYW5lbE1nciA9IHJlcXVpcmUoXCJwYW5lbE1nclwiKTtcbnZhciBfdGlwTWdyID0gcmVxdWlyZShcInRpcE1nclwiKTtcbnZhciBfcEluZm8gPSByZXF1aXJlKFwicEluZm9cIik7XG52YXIgX2Jhc2VVSSA9IHJlcXVpcmUoXCJiYXNlVUlcIik7XG52YXIgX2RheVJld2FyZCA9IHJlcXVpcmUoXCJkYXlSZXdhcmRcIik7XG52YXIgbSA9IGNjLl9kZWNvcmF0b3I7XG52YXIgdiA9IG0uY2NjbGFzcztcbnZhciBfID0gbS5wcm9wZXJ0eTtcbnZhciBiID0gKGZ1bmN0aW9uICh0KSB7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgdmFyIGUgPSAobnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XG4gICAgICAgIGUuZGF5Tm9kZXMgPSBbXTtcbiAgICAgICAgZS5nZXRCdG5Ob2RlID0gbnVsbDtcbiAgICAgICAgZS5oYXNHZXROb2RlID0gbnVsbDtcbiAgICAgICAgZS5yZWNpdmVSZXdhcmQgPSB7fTtcbiAgICAgICAgZS5hbmlEYXRhID0gW107XG4gICAgICAgIGUuY2FuUmVjaXZlID0gITE7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICBfX2V4dGVuZHMoZSwgdCk7XG4gICAgZS5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge307XG4gICAgZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciB0ID0gX3BJbmZvLmRlZmF1bHQuaW5zLmdldFNldmVuRGF5cygpLFxuICAgICAgICAgICAgICAgIGUgPSBfcEluZm8uZGVmYXVsdC5pbnMuZ2V0U2V2ZW5SZXdhcmQoKSxcbiAgICAgICAgICAgICAgICBvID0gX2NmZ01nci5kZWZhdWx0LnNlcnZlckNmZy5zZXZlbl9kYXlfcmV3YXJkLnJ1bGVzLFxuICAgICAgICAgICAgICAgIG4gPSB7fSxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICByID0gdGhpcy5kYXlOb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICBpIDwgcjtcbiAgICAgICAgICAgIGkrK1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBhID0gb1tpXS52YWw7XG4gICAgICAgICAgICB2YXIgcyA9IHRoaXMuZGF5Tm9kZXNbaV07XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKHMuaW5pdEl0ZW0oYSksXG4gICAgICAgICAgICAgICAgcy5zZXREZWZhdWx0KCksXG4gICAgICAgICAgICAgICAgNiA9PT0gaSAmJiBzLnNldENhblJlY2l2ZSgpLFxuICAgICAgICAgICAgICAgIGkgPCB0ICYmIChzLnNldENhblJlY2l2ZSgpLCBpIDwgZSAmJiBzLnNldFJlY2l2ZWQoKSksXG4gICAgICAgICAgICAgICAgdCA+IGkgJiYgaSA+PSBlKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGMgaW4gKCh0aGlzLmFuaURhdGEgPSB0aGlzLmFuaURhdGEuY29uY2F0KHMuYW5pRGF0YXMpKSwgKHRoaXMuY2FuUmVjaXZlID0gITApLCBhKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGFbY107XG4gICAgICAgICAgICAgICAgICAgIG5bY10gPyAobltjXSArPSBsKSA6IChuW2NdID0gbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVjaXZlUmV3YXJkID0gbjtcbiAgICAgICAgdGhpcy5jaGVja0J0bnMoKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmNoZWNrQnRucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5nZXRCdG5Ob2RlLmFjdGl2ZSA9IHRoaXMuY2FuUmVjaXZlO1xuICAgICAgICB0aGlzLmhhc0dldE5vZGUuYWN0aXZlID0gIXRoaXMuY2FuUmVjaXZlO1xuICAgIH07XG4gICAgZS5wcm90b3R5cGUub25CdG5HZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuY2FuUmVjaXZlKSB7XG4gICAgICAgICAgICB0aGlzLmNhblJlY2l2ZSA9ICExO1xuICAgICAgICAgICAgdGhpcy5jaGVja0J0bnMoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGUgPSBbXSwgbyA9IDAsIG4gPSB0aGlzLmFuaURhdGEubGVuZ3RoOyBvIDwgbjsgbysrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmFuaURhdGFbb107XG4gICAgICAgICAgICAgICAgdmFyIHIgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IGkuaXRlbUlkO1xuICAgICAgICAgICAgICAgIHZhciBnID0gTnVtYmVyKGkudmFsdWUpO1xuICAgICAgICAgICAgICAgIHIuaXRlbUlkID0gdTtcbiAgICAgICAgICAgICAgICByLndvcmxkUG9zID0gaS5pdGVtTm9kZS5wYXJlbnQuY29udmVydFRvV29ybGRTcGFjZUFSKGkuaXRlbU5vZGUucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIHIudmFsdWUgPSBnO1xuICAgICAgICAgICAgICAgIGUucHVzaChyKTtcbiAgICAgICAgICAgICAgICBfYmFnTWdyLmRlZmF1bHQuaW5zLmFkZEl0ZW0odSwgZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeSA9IF9wSW5mby5kZWZhdWx0Lmlucy5nZXRTZXZlbkRheXMoKTtcbiAgICAgICAgICAgIF9wSW5mby5kZWZhdWx0Lmlucy5zZXRTZXZlblJld2FyZCh5KTtcbiAgICAgICAgICAgIF9ldnRzLmRlZmF1bHQub3BFLmVtaXQoe2FjdGlvbjogX2V2dHMuZGVmYXVsdC5TSUdOX1JFRH0pO1xuICAgICAgICAgICAgdmFyIG0gPSBfcEluZm8uZGVmYXVsdC5pbnMuZ2V0U2V2ZW5SZXdhcmQoKTtcbiAgICAgICAgICAgIGZvciAobyA9IDAsIG4gPSB0aGlzLmRheU5vZGVzLmxlbmd0aDsgbyA8IG47IG8rKykge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gdGhpcy5kYXlOb2Rlc1tvXTtcbiAgICAgICAgICAgICAgICB2LnNldERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICA2ID09PSBvICYmIHYuc2V0Q2FuUmVjaXZlKCk7XG4gICAgICAgICAgICAgICAgbyA8IHkgJiYgKHYuc2V0Q2FuUmVjaXZlKCksIG8gPCBtICYmIHYuc2V0UmVjaXZlZCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfaWR4LnBsYXRmb3JtLnN0cmluZygpID09IF9wQ29uc3QuUEZDb2RlLkJ5dGVkYW5jZSkge1xuICAgICAgICAgICAgICAgIHZhciBfID0gX2lkeC5wbGF0Zm9ybS5nZXRTeXN0ZW1EYXRhKCk7XG4gICAgICAgICAgICAgICAgaWYgKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSAwO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF8uYXBwTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkRvdXlpblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRvdXlpbl9saXRlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSAtMSAhPSBfLnN5c3RlbS5pbmRleE9mKFwiaU9TXCIpO1xuICAgICAgICAgICAgICAgICAgICBiICYmIHkgPCA3ICYmICF3ICYmIF9yZXF1ZXN0LmRlZmF1bHQuaW5zLnNlbmRTZXZlbkNhcmQoYiwgeSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9wYW5lbE1nci5kZWZhdWx0Lmlucy5vcGVuKFwidWkvdWlfZmx5QW5pXCIsIHtcbiAgICAgICAgICAgICAgICBpdGVtRGF0YXM6IGUsXG4gICAgICAgICAgICAgICAgaGlkZUNiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHQuaGlkZVRoaXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIF90aXBNZ3IuZGVmYXVsdC5pbnMuc2hvd1RpcChcIuW3sumihuWPllwiKTtcbiAgICB9O1xuICAgIGUucHJvdG90eXBlLmhpZGVUaGlzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW18oW19kYXlSZXdhcmQuZGVmYXVsdF0pXSwgZS5wcm90b3R5cGUsIFwiZGF5Tm9kZXNcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtfKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiZ2V0QnRuTm9kZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW18oY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJoYXNHZXROb2RlXCIsIHZvaWQgMCk7XG4gICAgcmV0dXJuIF9fZGVjb3JhdGUoW3ZdLCBlKTtcbn0pKF9iYXNlVUkuZGVmYXVsdCk7XG5leHBvcnRzLmRlZmF1bHQgPSBiO1xuIl19